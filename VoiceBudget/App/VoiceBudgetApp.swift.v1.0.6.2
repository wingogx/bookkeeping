import SwiftUI
import Speech
import AVFoundation
import UserNotifications
// Balance fix: (

// NOTE: Detected 1 extra closing parentheses - manual fix may be needed
// MARK: - App Entry Point
@main
struct VoiceBudgetApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
                .environmentObject(DataManager.shared)
        }
    }
}

// MARK: - Data Models
struct Transaction: Identifiable, Codable {
    let id: UUID
    let amount: Double
    let category: String
    let note: String
    let date: Date
    let isExpense: Bool

    init(amount: Double, category: String, note: String, date: Date, isExpense: Bool) {
        self.id = UUID()
        self.amount = amount
        self.category = category
        self.note = note
        self.date = date
        self.isExpense = isExpense
    }
}

// MARK: - Achievement System
struct Achievement: Identifiable, Codable {
    let id: UUID
    let name: String
    let description: String
    let icon: String
    let isUnlocked: Bool
    let unlockedAt: Date?
    let type: AchievementType

    enum AchievementType: String, Codable {
        case firstRecord = "first_record"
        case streak3 = "streak_3"
        case streak7 = "streak_7"
        case streak15 = "streak_15"
        case streak30 = "streak_30"
        case budgetSaver = "budget_saver"
        case budgetMaster = "budget_master"
        case budgetControl = "budget_control"
    }

    init(name: String, description: String, icon: String, type: AchievementType, isUnlocked: Bool = false, unlockedAt: Date? = nil) {
        self.id = UUID()
        self.name = name
        self.description = description
        self.icon = icon
        self.type = type
        self.isUnlocked = isUnlocked
        self.unlockedAt = unlockedAt
    }
}

// MARK: - User Stats
struct UserStats: Codable {
    var totalTransactions: Int = 0
    var currentStreak: Int = 0
    var maxStreak: Int = 0
    var lastRecordDate: Date?
    var totalSaved: Double = 0
    var monthsWithoutOverspend: Int = 0

    init() {}
}

// MARK: - App Settings
struct AppSettings: Codable {
    var notificationsEnabled: Bool = false
    var morningReminderEnabled: Bool = true
    var afternoonReminderEnabled: Bool = true
    var eveningReminderEnabled: Bool = true
    var morningReminderTime: String = "10:00"
    var afternoonReminderTime: String = "15:00"
    var eveningReminderTime: String = "21:00"
    var budgetWarningEnabled: Bool = true
    var weeklyReportEnabled: Bool = true

    static let `default` = AppSettings()
}

// MARK: - Export Data Models
struct ExportData {
    enum DateRange: String, CaseIterable {
        case allTime = "all_time"
        case lastMonth = "last_month"
        case lastThreeMonths = "last_three_months"
        case thisYear = "this_year"
        case thisMonth = "this_month"

        var displayName: String {
            switch self {
            case .allTime: return "全部时间"
            case .lastMonth: return "最近一个月"
            case .lastThreeMonths: return "最近三个月"
            case .thisYear: return "本年度"
            case .thisMonth: return "本月"
            }
        }
    }

    enum ExportFormat: String, CaseIterable {
        case csv = "csv"
        case txt = "txt"

        var displayName: String {
            switch self {
            case .csv: return "CSV格式"
            case .txt: return "文本格式"
            }
        }

        var fileExtension: String {
            return rawValue
        }
    }
}

// MARK: - Custom Budget Model
struct CustomBudget: Codable, Identifiable {
    let id: UUID
    var name: String
    var startDate: Date
    var endDate: Date
    var totalLimit: Double
    var categoryLimits: [String: Double]?
    var description: String?

    init(name: String, startDate: Date, endDate: Date, totalLimit: Double, categoryLimits: [String: Double]? = nil, description: String? = nil) {
        self.id = UUID()
        self.name = name
        self.startDate = startDate
        self.endDate = endDate
        self.totalLimit = totalLimit
        self.categoryLimits = categoryLimits
        self.description = description
    }

    var isActive: Bool {
        let now = Date()
        return now >= startDate && now <= endDate
    }

    func getUsedAmount(from transactions: [Transaction]) -> Double {
        return transactions
            .filter { transaction in
                transaction.date >= startDate &&
                transaction.date <= endDate &&
                transaction.isExpense
            }
            .reduce(0) { $0 + $1.amount }
    }

    func getCategoryUsage(from transactions: [Transaction]) -> [String: Double] {
        let relevantTransactions = transactions.filter { transaction in
            transaction.date >= startDate &&
            transaction.date <= endDate &&
            transaction.isExpense
        }

        var usage: [String: Double] = [:]
        for transaction in relevantTransactions {
            usage[transaction.category, default: 0] += transaction.amount
        }
        return usage
    }
}

struct Budget: Codable {
    var monthlyLimit: Double
    var categoryLimits: [String: Double]
    var customBudgets: [CustomBudget]
    
    static let `default` = Budget(
        monthlyLimit: 3000,
        categoryLimits: [
            "餐饮": 1000,
            "交通": 500,
            "购物": 800,
            "娱乐": 400,
            "其他": 300
        ],
        customBudgets: []
    )
}

// MARK: - Data Manager
class DataManager: ObservableObject {
    static let shared = DataManager()
    
    @Published var transactions: [Transaction] = []
    @Published var budget = Budget.default
    @Published var categories: [String] = ["餐饮", "交通", "购物", "娱乐", "租房水电", "生活", "医疗", "教育", "其他"]
    @Published var achievements: [Achievement] = []
    @Published var userStats = UserStats()
    @Published var showAchievementAlert = false
    @Published var newAchievement: Achievement?
    @Published var appSettings = AppSettings.default

    private let transactionsKey = "transactions"
    private let budgetKey = "budget"
    private let categoriesKey = "categories"
    private let achievementsKey = "achievements"
    private let userStatsKey = "userStats"
    private let appSettingsKey = "appSettings"
    
    init() {
        loadData()
        initializeAchievements()
    }
    
    // 添加交易
    func addTransaction(_ transaction: Transaction) {
        transactions.append(transaction)
        updateUserStats()
        checkAchievements()
        checkBudgetWarnings(for: transaction)
        checkCustomBudgetWarnings(for: transaction)
        // 优化：只保存相关数据
        saveSpecificData([.transactions, .userStats, .achievements])
    }

    // 删除交易
    func deleteTransaction(_ transaction: Transaction) {
        transactions.removeAll { $0.id == transaction.id }
        // 优化：只保存交易数据
        saveSpecificData([.transactions])
    }
    
    // MARK: - 日期工具方法

    /// 检查两个日期是否在同一天
    private func isSameDay(_ date1: Date, _ date2: Date) -> Bool {
        let calendar = Calendar.current
        return calendar.startOfDay(for: date1) == calendar.startOfDay(for: date2)
    }

    /// 检查日期是否在当前月份
    private func isCurrentMonth(_ date: Date) -> Bool {
        let calendar = Calendar.current
        let now = Date()
        let nowComponents = calendar.dateComponents([.year, .month], from: now)
        let dateComponents = calendar.dateComponents([.year, .month], from: date)
        return nowComponents.year == dateComponents.year && nowComponents.month == dateComponents.month
    }

    /// 获取指定日期范围内的交易
    private func getTransactions(
        from startDate: Date? = nil,
        to endDate: Date? = nil,
        category: String? = nil,
        isExpense: Bool? = nil
    ) -> [Transaction] {
        return transactions.filter { transaction in
            // 日期范围过滤
            if let start = startDate, transaction.date < start { return false }
            if let end = endDate, transaction.date > end { return false }

            // 分类过滤
            if let cat = category, transaction.category != cat { return false }

            // 收支类型过滤
            if let expense = isExpense, transaction.isExpense != expense { return false }

            return true
        }
    }

    /// 获取当前月份的天数
    private func getCurrentMonthDays() -> Int {
        let calendar = Calendar.current
        let now = Date()
        return calendar.component(.day, from: now)
    }

    /// 获取日均支出
    var dailyAverageExpense: Double {
        let days = Double(getCurrentMonthDays())
        return days > 0 ? monthlyExpense / days : 0
    }

    /// 计算两个日期之间的天数差
    private func daysBetween(_ startDate: Date, _ endDate: Date) -> Int {
        let calendar = Calendar.current
        let start = calendar.startOfDay(for: startDate)
        let end = calendar.startOfDay(for: endDate)
        return calendar.dateComponents([.day], from: start, to: end).day ?? 0
    }

    /// 获取今天的开始时间
    private func startOfToday() -> Date {
        return Calendar.current.startOfDay(for: Date())
    }

    /// 计算剩余天数（用于自定义预算）
    func daysRemaining(until endDate: Date) -> Int {
        let today = startOfToday()
        let endOfDay = Calendar.current.startOfDay(for: endDate)
        return max(daysBetween(today, endOfDay), 0)
    }

    // MARK: - 数据查询方法

    // 获取今日交易
    var todayTransactions: [Transaction] {
        let today = Date()
        return transactions.filter { isSameDay($0.date, today) }
    }

    // 获取本月支出
    var monthlyExpense: Double {
        return transactions
            .filter { isCurrentMonth($0.date) && $0.isExpense }
            .reduce(0) { $0 + $1.amount }
    }

    // 获取分类支出
    func getCategoryExpense(category: String) -> Double {
        return transactions
            .filter { isCurrentMonth($0.date) && $0.isExpense && $0.category == category }
            .reduce(0) { $0 + $1.amount }
    }

    // 获取本月交易
    var thisMonthTransactions: [Transaction] {
        return transactions.filter { isCurrentMonth($0.date) }
    }
    
    // 分类管理方法
    func addCategory(_ category: String) {
        if !categories.contains(category) && !category.isEmpty {
            categories.append(category)
            // 优化：只保存分类数据
            saveSpecificData([.categories])
        }
    }

    func deleteCategory(_ category: String) {
        // 检查是否有交易使用此分类
        let hasTransactions = transactions.contains { $0.category == category }
        if !hasTransactions {
            categories.removeAll { $0 == category }
            // 从预算中移除此分类
            budget.categoryLimits.removeValue(forKey: category)
            // 优化：只保存相关数据
            saveSpecificData([.categories, .budget])
        }
    }
    
    func updateCategory(oldName: String, newName: String) {
        guard let index = categories.firstIndex(of: oldName),
              !newName.isEmpty,
              oldName != newName,
              !categories.contains(newName) else {
            print("⚠️ 分类更新失败: 无效的参数或分类名已存在")
            return
        }

        // 1. 更新分类列表
        categories[index] = newName

        // 2. 安全地创建新的交易数组
        transactions = transactions.compactMap { transaction in
            if transaction.category == oldName {
                return Transaction(
                    amount: transaction.amount,
                    category: newName,
                    note: transaction.note,
                    date: transaction.date,
                    isExpense: transaction.isExpense
                )
            }
            return transaction
        }

        // 3. 更新预算设置
        if let limit = budget.categoryLimits[oldName] {
            budget.categoryLimits[newName] = limit
            budget.categoryLimits.removeValue(forKey: oldName)
        }

        // 4. 保存数据
        saveData()
        print("✅ 分类更新成功: \(oldName) → \(newName)")
    }
    
    // 保存数据
    func saveData() {
        saveAllData()
    }

    // 保存所有数据
    private func saveAllData() {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .iso8601

        saveDataItem(transactions, key: transactionsKey, encoder: encoder, itemName: "交易记录")
        saveDataItem(budget, key: budgetKey, encoder: encoder, itemName: "预算设置")
        saveDataItem(categories, key: categoriesKey, encoder: encoder, itemName: "分类列表")
        saveDataItem(achievements, key: achievementsKey, encoder: encoder, itemName: "成就数据")
        saveDataItem(userStats, key: userStatsKey, encoder: encoder, itemName: "用户统计")
        saveDataItem(appSettings, key: appSettingsKey, encoder: encoder, itemName: "应用设置")
    }

    // 选择性保存 - 提高性能
    enum DataType {
        case transactions, budget, categories, achievements, userStats, appSettings
    }

    func saveSpecificData(_ types: Set<DataType>) {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .iso8601

        for type in types {
            switch type {
            case .transactions:
                saveDataItem(transactions, key: transactionsKey, encoder: encoder, itemName: "交易记录")
            case .budget:
                saveDataItem(budget, key: budgetKey, encoder: encoder, itemName: "预算设置")
            case .categories:
                saveDataItem(categories, key: categoriesKey, encoder: encoder, itemName: "分类列表")
            case .achievements:
                saveDataItem(achievements, key: achievementsKey, encoder: encoder, itemName: "成就数据")
            case .userStats:
                saveDataItem(userStats, key: userStatsKey, encoder: encoder, itemName: "用户统计")
            case .appSettings:
                saveDataItem(appSettings, key: appSettingsKey, encoder: encoder, itemName: "应用设置")
            }
        }
    }

    private func saveDataItem<T: Codable>(_ item: T, key: String, encoder: JSONEncoder, itemName: String) {
        do {
            let encoded = try encoder.encode(item)
            UserDefaults.standard.set(encoded, forKey: key)
            // print("✅ \(itemName)保存成功")
        } catch {
            print("❌ \(itemName)保存失败: \(error.localizedDescription)")
            // 尝试备份保存
            if let fallbackData = try? JSONEncoder().encode(item) {
                UserDefaults.standard.set(fallbackData, forKey: "\(key)_backup")
                print("💾 \(itemName)已保存到备份位置")
            }
        }
    }
    
    // 加载数据
    private func loadData() {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .iso8601

        transactions = loadDataItem([Transaction].self, key: transactionsKey, decoder: decoder, defaultValue: [], itemName: "交易记录")
        budget = loadDataItem(Budget.self, key: budgetKey, decoder: decoder, defaultValue: Budget.default, itemName: "预算设置")
        categories = loadDataItem([String].self, key: categoriesKey, decoder: decoder, defaultValue: ["餐饮", "交通", "购物", "娱乐", "租房水电", "生活", "医疗", "教育", "其他"], itemName: "分类列表")
        achievements = loadDataItem([Achievement].self, key: achievementsKey, decoder: decoder, defaultValue: [], itemName: "成就数据")
        userStats = loadDataItem(UserStats.self, key: userStatsKey, decoder: decoder, defaultValue: UserStats(), itemName: "用户统计")
        appSettings = loadDataItem(AppSettings.self, key: appSettingsKey, decoder: decoder, defaultValue: AppSettings.default, itemName: "应用设置")
    }

    private func loadDataItem<T: Codable>(_ type: T.Type, key: String, decoder: JSONDecoder, defaultValue: T, itemName: String) -> T {
        guard let data = UserDefaults.standard.data(forKey: key) else {
            print("📝 \(itemName): 使用默认值")
            return defaultValue
        }

        do {
            let decoded = try decoder.decode(type, from: data)
            // print("✅ \(itemName)加载成功")
            return decoded
        } catch {
            print("❌ \(itemName)加载失败: \(error.localizedDescription)")

            // 尝试从备份加载
            if let backupData = UserDefaults.standard.data(forKey: "\(key)_backup"),
               let backupDecoded = try? decoder.decode(type, from: backupData) {
                print("💾 从备份恢复\(itemName)成功")
                return backupDecoded
            }

            // 尝试使用默认解码器
            if let fallbackDecoded = try? JSONDecoder().decode(type, from: data) {
                print("🔄 使用备用解码器恢复\(itemName)成功")
                return fallbackDecoded
            }

            print("⚠️ \(itemName)恢复失败，使用默认值")
            return defaultValue
        }
    }

    // MARK: - Achievement Management
    private func initializeAchievements() {
        if achievements.isEmpty {
            achievements = [
                Achievement(name: "记账新手", description: "完成首次记账", icon: "⭐", type: .firstRecord),
                Achievement(name: "坚持小达人", description: "连续记账3天", icon: "🔥", type: .streak3),
                Achievement(name: "记账达人", description: "连续记账7天", icon: "👑", type: .streak7),
                Achievement(name: "习惯大师", description: "连续记账15天", icon: "🏆", type: .streak15),
                Achievement(name: "记账之王", description: "连续记账30天", icon: "🏅", type: .streak30),
                Achievement(name: "省钱能手", description: "月支出比上月减少", icon: "💰", type: .budgetSaver),
                Achievement(name: "预算达人", description: "首次设置预算", icon: "📊", type: .budgetMaster),
                Achievement(name: "控制大师", description: "连续3个月预算不超支", icon: "🛡️", type: .budgetControl)
            ]
            saveData()
        }
    }

    private func updateUserStats() {
        userStats.totalTransactions += 1

        let today = startOfToday()
        let lastRecordDay = userStats.lastRecordDate.map { Calendar.current.startOfDay(for: $0) }

        if let lastDay = lastRecordDay {
            let daysDifference = daysBetween(lastDay, today)

            if daysDifference == 1 {
                // 连续记账
                userStats.currentStreak += 1
            } else if daysDifference > 1 {
                // 连击中断
                userStats.currentStreak = 1
            }
            // daysDifference == 0 表示同一天，不增加连击
        } else {
            // 第一次记账
            userStats.currentStreak = 1
        }

        userStats.maxStreak = max(userStats.maxStreak, userStats.currentStreak)
        userStats.lastRecordDate = Date()
    }

    private func checkAchievements() {
        var newlyUnlocked: [Achievement] = []

        for i in 0..<achievements.count {
            if !achievements[i].isUnlocked {
                let shouldUnlock = checkAchievementCondition(achievements[i].type)
                if shouldUnlock {
                    achievements[i] = Achievement(
                        name: achievements[i].name,
                        description: achievements[i].description,
                        icon: achievements[i].icon,
                        type: achievements[i].type,
                        isUnlocked: true,
                        unlockedAt: Date()
                    )
                    newlyUnlocked.append(achievements[i])
                }
            }
        }

        if !newlyUnlocked.isEmpty {
            newAchievement = newlyUnlocked.first
            showAchievementAlert = true
        }
    }

    private func checkAchievementCondition(_ type: Achievement.AchievementType) -> Bool {
        switch type {
        case .firstRecord:
            return userStats.totalTransactions >= 1
        case .streak3:
            return userStats.currentStreak >= 3
        case .streak7:
            return userStats.currentStreak >= 7
        case .streak15:
            return userStats.currentStreak >= 15
        case .streak30:
            return userStats.currentStreak >= 30
        case .budgetSaver:
            // 简化实现，暂时返回false
            return false
        case .budgetMaster:
            return budget.monthlyLimit > 0
        case .budgetControl:
            // 简化实现，暂时返回false
            return false
        }
    }

    // MARK: - Custom Budget Management

    // 添加自定义预算
    func addCustomBudget(_ customBudget: CustomBudget) {
        budget.customBudgets.append(customBudget)

        // 设置到期提醒
        NotificationManager.shared.scheduleCustomBudgetExpiryReminder(customBudget: customBudget)

        saveData()
    }

    // 删除自定义预算
    func deleteCustomBudget(_ customBudget: CustomBudget) {
        budget.customBudgets.removeAll { $0.id == customBudget.id }

        // 取消相关通知
        NotificationManager.shared.cancelCustomBudgetNotifications(budgetId: customBudget.id)

        saveData()
    }

    // 删除自定义预算 (通过索引)
    func deleteCustomBudget(at index: Int) {
        guard index >= 0 && index < budget.customBudgets.count else { return }

        let budgetToDelete = budget.customBudgets[index]
        budget.customBudgets.remove(at: index)

        // 取消相关通知
        NotificationManager.shared.cancelCustomBudgetNotifications(budgetId: budgetToDelete.id)

        saveData()
    }

    // 更新自定义预算
    func updateCustomBudget(_ updatedBudget: CustomBudget) {
        if let index = budget.customBudgets.firstIndex(where: { $0.id == updatedBudget.id }) {
            budget.customBudgets[index] = updatedBudget
            saveData()
        }
    }

    // 获取活跃的自定义预算
    func getActiveCustomBudgets() -> [CustomBudget] {
        return budget.customBudgets.filter { $0.isActive }
    }

    // 获取所有自定义预算 (按活跃状态排序)
    func getAllCustomBudgets() -> [CustomBudget] {
        return budget.customBudgets.sorted { budget1, budget2 in
            if budget1.isActive && !budget2.isActive {
                return true
            } else if !budget1.isActive && budget2.isActive {
                return false
            }
            return budget1.startDate > budget2.startDate
        }
    }

    // 检查预算名称是否重复
    func isCustomBudgetNameDuplicate(_ name: String, excludingId: UUID? = nil) -> Bool {
        return budget.customBudgets.contains { budget in
            budget.name == name && budget.id != excludingId
        }
    }

    // 获取自定义预算的使用情况统计
    func getCustomBudgetStats(_ customBudget: CustomBudget) -> (usedAmount: Double, percentage: Double, daysRemaining: Int) {
        let usedAmount = customBudget.getUsedAmount(from: transactions)
        let percentage = customBudget.totalLimit > 0 ? min(usedAmount / customBudget.totalLimit, 1.0) : 0

        let daysRemaining = self.daysRemaining(until: customBudget.endDate)

        return (usedAmount, percentage, daysRemaining)
    }

    // 清理过期的自定义预算
    func cleanupExpiredCustomBudgets() {
        let calendar = Calendar.current
        let threeDaysAgo = calendar.date(byAdding: .day, value: -3, to: Date()) ?? Date()

        let initialCount = budget.customBudgets.count
        budget.customBudgets.removeAll { customBudget in
            !customBudget.isActive && customBudget.endDate < threeDaysAgo
        }

        if budget.customBudgets.count != initialCount {
            saveData()
        }
    }

    // MARK: - Export Functionality
    func getTransactionsForExport(dateRange: ExportData.DateRange) -> [Transaction] {
        let calendar = Calendar.current
        let now = Date()

        switch dateRange {
        case .allTime:
            return transactions

        case .thisMonth:
            let month = calendar.component(.month, from: now)
            let year = calendar.component(.year, from: now)
            return transactions.filter { transaction in
                let tMonth = calendar.component(.month, from: transaction.date)
                let tYear = calendar.component(.year, from: transaction.date)
                return tMonth == month && tYear == year
            }

        case .lastMonth:
            // 最近30天的交易，而不是上个自然月
            let thirtyDaysAgo = calendar.date(byAdding: .day, value: -30, to: now) ?? now
            return transactions.filter { $0.date >= thirtyDaysAgo }

        case .lastThreeMonths:
            let threeMonthsAgo = calendar.date(byAdding: .month, value: -3, to: now) ?? now
            return transactions.filter { $0.date >= threeMonthsAgo }

        case .thisYear:
            let year = calendar.component(.year, from: now)
            return transactions.filter { transaction in
                let tYear = calendar.component(.year, from: transaction.date)
                return tYear == year
            }
        }
    }

    func exportDataAsCSV(transactions: [Transaction]) -> String {
        var csv = "日期,类型,金额,分类,备注\n"

        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
        formatter.locale = Locale(identifier: "zh_CN")

        for transaction in transactions.sorted(by: { $0.date > $1.date }) {
            let dateString = formatter.string(from: transaction.date)
            let typeString = transaction.isExpense ? "支出" : "收入"
            let amountString = String(format: "%.2f", transaction.amount)
            let categoryString = transaction.category
            let noteString = transaction.note.replacingOccurrences(of: ",", with: "，") // 替换逗号避免 CSV 格式问题

            csv += "\(dateString),\(typeString),\(amountString),\(categoryString),\(noteString)\n"
        }

        return csv
    }

    func exportDataAsText(transactions: [Transaction]) -> String {
        var text = "记账数据导出\n"
        text += "===================\n\n"

        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy年M月d日 HH:mm"
        formatter.locale = Locale(identifier: "zh_CN")

        let groupedTransactions = Dictionary(grouping: transactions.sorted(by: { $0.date > $1.date })) { transaction in
            Calendar.current.dateInterval(of: .day, for: transaction.date)?.start ?? transaction.date
        }

        let sortedKeys = groupedTransactions.keys.sorted(by: >)

        for date in sortedKeys {
            let dayFormatter = DateFormatter()
            dayFormatter.dateFormat = "yyyy年M月d日"
            dayFormatter.locale = Locale(identifier: "zh_CN")
            text += dayFormatter.string(from: date) + "\n"
            text += "-----------\n"

            let dayTransactions = groupedTransactions[date] ?? []
            var dayTotal: Double = 0

            for transaction in dayTransactions {
                let timeString = formatter.string(from: transaction.date).components(separatedBy: " ")[1]
                let typeString = transaction.isExpense ? "支出" : "收入"
                let amountString = String(format: "%.2f", transaction.amount)
                text += "\(timeString) [\(typeString)] ¥\(amountString) - \(transaction.category)\n"
                text += "  备注: \(transaction.note)\n"

                if transaction.isExpense {
                    dayTotal += transaction.amount
                }
            }

            text += "当日支出小计: ¥\(String(format: "%.2f", dayTotal))\n\n"
        }

        let totalExpense = transactions.filter { $0.isExpense }.reduce(0) { $0 + $1.amount }
        let totalIncome = transactions.filter { !$0.isExpense }.reduce(0) { $0 + $1.amount }

        text += "===================\n"
        text += "总统计:\n"
        text += "总支出: ¥\(String(format: "%.2f", totalExpense))\n"
        text += "总收入: ¥\(String(format: "%.2f", totalIncome))\n"
        text += "净支出: ¥\(String(format: "%.2f", totalExpense - totalIncome))\n"

        return text
    }

    // MARK: - Budget Warning System
    private func checkBudgetWarnings(for transaction: Transaction) {
        guard transaction.isExpense && appSettings.budgetWarningEnabled else { return }

        let categoryLimit = budget.categoryLimits[transaction.category] ?? 0
        guard categoryLimit > 0 else { return }

        let categoryExpense = getCategoryExpense(category: transaction.category)
        let percentage = categoryExpense / categoryLimit

        // 只在70%和90%阈值时发送通知
        if percentage >= 0.7 && percentage < 0.75 {
            NotificationManager.shared.scheduleBudgetWarning(category: transaction.category, percentage: percentage)
        } else if percentage >= 0.9 && percentage < 0.95 {
            NotificationManager.shared.scheduleBudgetWarning(category: transaction.category, percentage: percentage)
        }
    }

    // 检查自定义预算警告
    private func checkCustomBudgetWarnings(for transaction: Transaction) {
        guard transaction.isExpense && appSettings.budgetWarningEnabled else { return }

        // 检查所有活跃的自定义预算
        for customBudget in budget.customBudgets {
            guard customBudget.isActive else { continue }

            // 检查交易是否在自定义预算时间范围内
            guard transaction.date >= customBudget.startDate &&
                  transaction.date <= customBudget.endDate else { continue }

            let usedAmount = customBudget.getUsedAmount(from: transactions)
            let percentage = usedAmount / customBudget.totalLimit

            // 在70%和90%阈值时发送通知
            if percentage >= 0.7 && percentage < 0.75 {
                NotificationManager.shared.scheduleCustomBudgetWarning(
                    customBudget: customBudget,
                    percentage: percentage
                )
            } else if percentage >= 0.9 && percentage < 0.95 {
                NotificationManager.shared.scheduleCustomBudgetWarning(
                    customBudget: customBudget,
                    percentage: percentage
                )
            }
        }
    }
}

// MARK: - Voice Recognition Manager
class VoiceRecognitionManager: NSObject, ObservableObject {
    @Published var isRecording = false
    @Published var recognizedText = ""
    @Published var errorMessage = ""
    
    private var speechRecognizer: SFSpeechRecognizer? = SFSpeechRecognizer(locale: Locale(identifier: "zh-CN"))
    private var recognitionRequest: SFSpeechAudioBufferRecognitionRequest?
    private var recognitionTask: SFSpeechRecognitionTask?
    private let audioEngine = AVAudioEngine()
    
    override init() {
        super.init()
        requestAuthorization()
    }
    
    func requestAuthorization() {
        // 请求语音识别权限
        SFSpeechRecognizer.requestAuthorization { authStatus in
            DispatchQueue.main.async {
                switch authStatus {
                case .authorized:
                    print("✅ 语音识别已授权")
                case .denied:
                    self.errorMessage = "语音识别权限被拒绝，请在设置中开启"
                    print("❌ 语音识别权限被拒绝")
                case .restricted:
                    self.errorMessage = "语音识别权限被限制"
                    print("❌ 语音识别权限被限制")
                case .notDetermined:
                    self.errorMessage = "语音识别权限未确定"
                    print("⚠️ 语音识别权限未确定")
                @unknown default:
                    self.errorMessage = "未知语音识别权限状态"
                    print("❌ 未知语音识别权限状态")
                }
            }
        }

        // 请求麦克风权限
        AVAudioSession.sharedInstance().requestRecordPermission { granted in
            DispatchQueue.main.async {
                if granted {
                    print("✅ 麦克风权限已授权")
                } else {
                    self.errorMessage = "麦克风权限被拒绝，请在设置中开启"
                    print("❌ 麦克风权限被拒绝")
                }
            }
        }
    }
    
    func startRecording() {
        print("🎤 开始录音...")

        if audioEngine.isRunning {
            stopRecording()
            return
        }

        // 检查语音识别器状态
        guard let recognizer = speechRecognizer, recognizer.isAvailable else {
            errorMessage = "语音识别不可用"
            print("❌ 语音识别器不可用")
            return
        }

        recognizedText = ""
        errorMessage = ""
        
        let audioSession = AVAudioSession.sharedInstance()
        do {
            try audioSession.setCategory(.record, mode: .measurement, options: .duckOthers)
            try audioSession.setActive(true, options: .notifyOthersOnDeactivation)
        } catch {
            errorMessage = "音频会话设置失败"
            return
        }
        
        recognitionRequest = SFSpeechAudioBufferRecognitionRequest()
        
        let inputNode = audioEngine.inputNode
        guard let recognitionRequest = recognitionRequest else { return }
        
        recognitionRequest.shouldReportPartialResults = true
        
        guard let recognizer = speechRecognizer else {
            print("❌ 语音识别器为空")
            return
        }

        recognitionTask = recognizer.recognitionTask(with: recognitionRequest) { result, error in
            DispatchQueue.main.async {
                if let result = result {
                    self.recognizedText = result.bestTranscription.formattedString
                    print("🔍 识别到文本: \(self.recognizedText)")
                }

                if let error = error {
                    self.errorMessage = "语音识别错误: \(error.localizedDescription)"
                    print("❌ 语音识别错误: \(error)")
                }

                if error != nil || result?.isFinal == true {
                    self.audioEngine.stop()
                    inputNode.removeTap(onBus: 0)
                    self.recognitionRequest = nil
                    self.recognitionTask = nil
                    self.isRecording = false
                    print("🔚 录音结束")
                }
            }
        }
        
        let recordingFormat = inputNode.outputFormat(forBus: 0)
        inputNode.installTap(onBus: 0, bufferSize: 1024, format: recordingFormat) { buffer, _ in
            self.recognitionRequest?.append(buffer)
        }
        
        audioEngine.prepare()
        
        do {
            try audioEngine.start()
            isRecording = true
        } catch {
            errorMessage = "无法启动音频引擎"
        }
    }
    
    func stopRecording() {
        audioEngine.stop()
        recognitionRequest?.endAudio()
        isRecording = false
    }
    
    // 解析多笔交易
    func parseMultipleTransactions(from text: String) -> [(amount: Double?, category: String?, note: String?, date: Date?)] {
        print("🔄 开始解析多笔交易: \"\(text)\"")

        // 尝试找到所有金额
        let amountPattern = "\\d+(\\.\\d+)?"
        let amountRegex = try? NSRegularExpression(pattern: amountPattern, options: [])
        let amountMatches = amountRegex?.matches(in: text, options: [], range: NSRange(location: 0, length: text.count)) ?? []

        print("💰 发现 \(amountMatches.count) 个金额")
        for (i, match) in amountMatches.enumerated() {
            let range = Range(match.range, in: text)!
            let amountText = String(text[range])
            print("  金额\(i+1): '\(amountText)' at \(match.range.location)")
        }

        // 如果只有一个金额，检查是否有"各"字表示多笔相同金额的交易
        if amountMatches.count <= 1 {
            if text.contains("各") {
                print("📝 发现'各'字，可能是多笔相同金额交易")
                return parseEachTransaction(from: text)
            } else {
                print("📝 单笔交易，使用原始解析")
                let transaction = parseTransaction(from: text)
                return transaction.amount != nil ? [transaction] : []
            }
        }

        // 多个金额的情况，需要智能分割
        var segments: [String] = []

        // 方法1：基于关键分隔符分割
        let separators = ["，", ",", "还有", "另外", "然后", "接着", "再", " 和 "]

        // 找到最佳的分隔符
        var bestSeparator: String? = nil
        var maxSegments = 1

        for separator in separators {
            let testSegments = text.components(separatedBy: separator)
            if testSegments.count > maxSegments {
                maxSegments = testSegments.count
                bestSeparator = separator
            }
        }

        if let separator = bestSeparator {
            segments = text.components(separatedBy: separator)
            print("📊 使用分隔符 '\(separator)' 分割成 \(segments.count) 个片段: \(segments)")
        } else {
            print("📊 没有找到分隔符，使用智能分割")
            // 方法2：使用更智能的分割算法
            segments = intelligentSplit(text: text, amountMatches: amountMatches)
        }

        // 清理片段
        segments = segments.map { $0.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines) }
                          .filter { !$0.isEmpty && $0.count > 1 }

        print("📊 清理后得到 \(segments.count) 个片段: \(segments)")

        // 解析每个片段
        var transactions: [(amount: Double?, category: String?, note: String?, date: Date?)] = []
        for segment in segments {
            let transaction = parseTransaction(from: segment)
            // 只添加有金额的交易
            if transaction.amount != nil {
                transactions.append(transaction)
                print("✅ 解析成功: 金额=\(transaction.amount ?? 0), 分类=\(transaction.category ?? ""), 备注=\(transaction.note ?? ""), 日期=\(transaction.date?.description ?? "当前")")
            }
        }

        print("📈 共解析出 \(transactions.count) 笔交易")
        return transactions
    }

    // 按金额位置智能分割文本，每个金额对应一个独立片段
    private func splitByAmountPositions(text: String, amountMatches: [NSTextCheckingResult]) -> [String] {
        if amountMatches.count <= 1 {
            return [text]
        }

        var segments: [String] = []
        print("🔧 开始按\(amountMatches.count)个金额位置分割文本")

        // 为每个金额找到合理的上下文范围
        for (index, match) in amountMatches.enumerated() {
            let currentStart = match.range.location
            let currentEnd = match.range.location + match.range.length

            var segmentStart: Int
            var segmentEnd: Int

            if index == 0 {
                // 第一个金额：从开头开始
                segmentStart = 0
                // 结束点：到第二个金额开始前的合理位置
                if index + 1 < amountMatches.count {
                    let nextAmountStart = amountMatches[index + 1].range.location
                    // 寻找两个金额之间的分界点
                    segmentEnd = findBoundaryBetweenAmounts(text: text,
                                                          firstAmountEnd: currentEnd,
                                                          secondAmountStart: nextAmountStart)
                } else {
                    segmentEnd = text.count
                }
            } else {
                // 后续金额：从前一个分界点开始
                let prevAmountEnd = amountMatches[index - 1].range.location + amountMatches[index - 1].range.length
                segmentStart = findBoundaryBetweenAmounts(text: text,
                                                        firstAmountEnd: prevAmountEnd,
                                                        secondAmountStart: currentStart)

                // 结束点：如果有下一个金额，找到分界点；否则到文本末尾
                if index + 1 < amountMatches.count {
                    let nextAmountStart = amountMatches[index + 1].range.location
                    segmentEnd = findBoundaryBetweenAmounts(text: text,
                                                          firstAmountEnd: currentEnd,
                                                          secondAmountStart: nextAmountStart)
                } else {
                    segmentEnd = text.count
                }
            }

            // 确保边界合理
            segmentStart = max(0, segmentStart)
            segmentEnd = min(text.count, segmentEnd)

            if segmentStart < segmentEnd {
                let range = NSRange(location: segmentStart, length: segmentEnd - segmentStart)
                if let swiftRange = Range(range, in: text) {
                    let segment = String(text[swiftRange]).trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)
                    // 检查片段是否包含金额（数字）
                    let containsAmount = segment.range(of: "\\d+(\\.\\d+)?", options: .regularExpression) != nil
                    if !segment.isEmpty && containsAmount {
                        segments.append(segment)
                        print("🔧 片段 \(index + 1): \"\(segment)\"")
                    }
                }
            }
        }

        print("🔧 通过金额位置分割得到 \(segments.count) 个有效片段")
        return segments
    }

    // 处理"各"字表示的多笔相同金额交易
    func parseEachTransaction(from text: String) -> [(amount: Double?, category: String?, note: String?, date: Date?)] {
        print("🔄 解析'各'字交易: \"\(text)\"")

        // 提取金额
        let amountPattern = "\\d+(\\.\\d+)?"
        var amount: Double?
        if let range = text.range(of: amountPattern, options: .regularExpression) {
            amount = Double(text[range])
            print("💰 提取到金额: \(amount ?? 0)")
        }

        guard let validAmount = amount else {
            print("❌ 未找到有效金额")
            return []
        }

        // 查找"各"字之前的部分，寻找多个时间或活动
        let eachPosition = text.range(of: "各")
        let beforeEach: String
        if let eachRange = eachPosition {
            beforeEach = String(text[..<eachRange.lowerBound])
        } else {
            beforeEach = text
        }

        print("📝 '各'字前的内容: \"\(beforeEach)\"")

        // 寻找具体的时间标记（排除全局时间上下文）
        var timeMarkers: [String] = []
        let specificTimeKeywords = ["早饭", "早上", "中午", "午饭", "下午", "晚上", "晚饭"]  // 排除昨天、今天、明天
        let globalTimeKeywords = ["昨天", "今天", "明天"]  // 全局时间上下文

        for keyword in specificTimeKeywords {
            if beforeEach.contains(keyword) {
                timeMarkers.append(keyword)
            }
        }

        // 如果没有找到具体时间标记，但有全局时间关键词，只使用第一个
        if timeMarkers.isEmpty {
            for keyword in globalTimeKeywords {
                if beforeEach.contains(keyword) {
                    timeMarkers.append(keyword)
                    break  // 只取第一个全局时间
                }
            }
        }

        // 如果找到多个时间标记，为每个创建一笔交易
        if timeMarkers.count >= 2 {
            print("🕐 找到多个时间标记: \(timeMarkers)")
            var transactions: [(amount: Double?, category: String?, note: String?, date: Date?)] = []

            for timeMarker in timeMarkers {
                // 构建包含完整上下文的虚拟片段进行解析
                // 从原始文本中提取活动描述（如"吃饭"）
                var activity = "吃饭"  // 默认活动
                let activityKeywords = ["吃饭", "用餐", "就餐", "早餐", "午餐", "晚餐", "买菜", "购物", "打车", "地铁", "公交"]

                for keyword in activityKeywords {
                    if beforeEach.contains(keyword) {
                        activity = keyword
                        break
                    }
                }

                // 构建完整的备注信息
                let fullNote = "\(timeMarker)\(activity)"
                let virtualSegment = "\(fullNote)\(validAmount)元"

                let transaction = parseTransaction(from: virtualSegment)
                if transaction.amount != nil || validAmount > 0 {
                    // 使用正确的备注信息
                    let finalTransaction = (
                        amount: validAmount,
                        category: transaction.category ?? "餐饮", // 默认分类
                        note: fullNote,  // 使用完整的备注
                        date: transaction.date
                    )
                    transactions.append(finalTransaction)
                    print("✅ 创建交易: \(fullNote) - \(validAmount)元")
                }
            }

            return transactions
        } else {
            // 如果没有找到多个时间标记，检查是否有"和"或"跟"连接的活动
            let connectors = ["和", "跟"]
            for connector in connectors {
                if beforeEach.contains(connector) {
                    let parts = beforeEach.components(separatedBy: connector)
                    if parts.count >= 2 {
                        print("🔗 找到'\(connector)'连接的多个部分: \(parts)")
                        var transactions: [(amount: Double?, category: String?, note: String?, date: Date?)] = []

                        for part in parts {
                            let trimmedPart = part.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)
                            if !trimmedPart.isEmpty {
                                // 如果部分内容没有活动描述，添加默认的"吃饭"
                                let hasActivity = trimmedPart.contains("饭") || trimmedPart.contains("餐") ||
                                                trimmedPart.contains("吃") || trimmedPart.contains("喝") ||
                                                trimmedPart.contains("买") || trimmedPart.contains("购")
                                let contextText = hasActivity ? trimmedPart : "\(trimmedPart)吃饭"

                                let virtualSegment = "\(contextText)\(validAmount)"
                                let transaction = parseTransaction(from: virtualSegment)
                                let finalTransaction = (
                                    amount: validAmount,
                                    category: transaction.category,
                                    note: transaction.note,
                                    date: transaction.date
                                )
                                transactions.append(finalTransaction)
                                print("✅ 创建交易: \(contextText) - \(validAmount)元, 日期: \(transaction.date?.description ?? "当前")")
                            }
                        }

                        return transactions
                    }
                }
            }
        }

        // 如果无法分割，返回单笔交易
        print("📝 无法分割，返回单笔交易")
        let transaction = parseTransaction(from: text)
        return transaction.amount != nil ? [transaction] : []
    }

    // 在两个金额之间找到合适的分界点
    private func findBoundaryBetweenAmounts(text: String, firstAmountEnd: Int, secondAmountStart: Int) -> Int {
        let searchStart = firstAmountEnd
        let searchEnd = secondAmountStart

        if searchStart >= searchEnd {
            return searchStart
        }

        // 在两个金额之间寻找语义分界点
        let searchRange = searchStart..<min(searchEnd, text.count)

        // 寻找时间词汇和其他可能的分界点
        let timeMarkers = ["早上", "中午", "下午", "晚上", "昨天", "今天", "明天"]
        let boundaryMarkers = ["上吃", "上喝", "上买", "上花", "块上", "元上"] // 处理语音识别错误

        for pos in searchRange {
            let remainingText = String(text.suffix(from: text.index(text.startIndex, offsetBy: pos)))

            // 检查时间标记
            for marker in timeMarkers {
                if remainingText.hasPrefix(marker) {
                    print("🎯 在位置\(pos)找到时间标记'\(marker)'作为分界点")
                    return pos
                }
            }

            // 检查边界标记（处理语音识别错误）
            for marker in boundaryMarkers {
                if remainingText.hasPrefix(marker) {
                    print("🎯 在位置\(pos)找到边界标记'\(marker)'作为分界点")
                    return pos
                }
            }
        }

        // 如果没找到时间标记，返回中点
        let midpoint = (searchStart + searchEnd) / 2
        print("🎯 使用中点位置\(midpoint)作为分界点")
        return midpoint
    }

    // 新的智能分割算法，专门处理语音识别的特殊情况
    private func intelligentSplit(text: String, amountMatches: [NSTextCheckingResult]) -> [String] {
        print("🧠 使用智能分割算法")

        if amountMatches.count <= 1 {
            return [text]
        }

        var segments: [String] = []

        // 对于2个金额的特殊处理
        if amountMatches.count == 2 {
            let firstAmountPos = amountMatches[0].range.location
            let secondAmountPos = amountMatches[1].range.location

            // 查找可能的分割点
            let midPoint = (firstAmountPos + amountMatches[0].range.length + secondAmountPos) / 2

            // 在中点附近寻找最佳分割位置
            var bestSplitPos = midPoint
            let searchStart = firstAmountPos + amountMatches[0].range.length
            let searchEnd = secondAmountPos

            // 寻找字符级别的分割点 - 时间关键词优先
            let timeKeywords = ["晚上", "下午", "早上", "中午", "上午"]
            let otherKeywords = ["上吃", "上买", "上花", "块上", "元上"]

            var foundTimeKeyword = false

            // 优先寻找时间关键词
            for pos in searchStart..<min(searchEnd, text.count) {
                let index = text.index(text.startIndex, offsetBy: pos)
                let remainingText = String(text[index...])

                for keyword in timeKeywords {
                    if remainingText.hasPrefix(keyword) {
                        bestSplitPos = pos
                        foundTimeKeyword = true
                        print("🎯 在位置\(pos)找到时间关键词'\(keyword)'")
                        break
                    }
                }

                if foundTimeKeyword {
                    break
                }
            }

            // 如果没找到时间关键词，再寻找其他关键词
            if !foundTimeKeyword {
                for pos in searchStart..<min(searchEnd, text.count) {
                    let index = text.index(text.startIndex, offsetBy: pos)
                    let remainingText = String(text[index...])

                    for keyword in otherKeywords {
                        if remainingText.hasPrefix(keyword) {
                            bestSplitPos = pos
                            print("🎯 在位置\(pos)找到其他关键词'\(keyword)'")
                            break
                        }
                    }
                }
            }

            // 如果没找到关键词，使用简单的规则
            if bestSplitPos == midPoint {
                // 查找"块"或"元"后面的位置
                let firstAmountEnd = firstAmountPos + amountMatches[0].range.length
                for pos in firstAmountEnd..<min(secondAmountPos, text.count) {
                    let index = text.index(text.startIndex, offsetBy: pos)
                    let char = text[index]
                    if char == "块" || char == "元" || char == "上" {
                        bestSplitPos = pos + 1
                        break
                    }
                }
            }

            // 分割文本
            if bestSplitPos > 0 && bestSplitPos < text.count {
                let firstSegment = String(text.prefix(bestSplitPos))
                let secondSegment = String(text.suffix(from: text.index(text.startIndex, offsetBy: bestSplitPos)))

                segments = [firstSegment, secondSegment]
                print("🔪 分割点位置: \(bestSplitPos)")
                print("  第一段: '\(firstSegment)'")
                print("  第二段: '\(secondSegment)'")
            }
        }

        // 如果分割失败，回退到原来的方法
        if segments.isEmpty {
            segments = splitByAmountPositions(text: text, amountMatches: amountMatches)
        }

        return segments
    }

    // 解析识别的文本（单笔交易）
    func parseTransaction(from text: String) -> (amount: Double?, category: String?, note: String?, date: Date?) {
        print("🔍 解析单笔交易: \"\(text)\"")

        var amount: Double?
        var category: String?

        // 提取金额
        let amountPattern = "\\d+(\\.\\d+)?"
        if let range = text.range(of: amountPattern, options: .regularExpression) {
            amount = Double(text[range])
            print("💰 提取到金额: \(amount ?? 0)")
        }

        // 智能清理备注，保留关键信息
        var cleanNote = text

        // 去掉金额数字但保留上下文
        let amountRegex = try? NSRegularExpression(pattern: amountPattern, options: [])
        if let regex = amountRegex {
            cleanNote = regex.stringByReplacingMatches(
                in: cleanNote,
                options: [],
                range: NSRange(location: 0, length: cleanNote.count),
                withTemplate: ""
            )
        }

        // 提取关键时间和场景信息
        let timeKeywords = ["早上", "中午", "下午", "晚上", "昨天", "今天", "明天"]
        let actionKeywords = ["吃饭", "喝", "买", "购买", "打车", "充值", "看电影", "购物"]
        let placeKeywords = ["超市", "餐厅", "商场", "地铁", "公交", "医院", "学校"]

        var keyInfo: [String] = []

        // 只保留当前文本片段中实际存在的关键词，避免重复
        let currentText = text  // 使用原始输入文本而不是cleanNote

        // 保留时间信息（只取第一个匹配的时间关键词）
        var timeFound = false
        for keyword in timeKeywords {
            if currentText.contains(keyword) && !timeFound {
                keyInfo.append(keyword)
                timeFound = true
                break  // 只取一个时间关键词
            }
        }

        // 保留动作信息（只取第一个匹配的动作关键词）
        var actionFound = false
        for keyword in actionKeywords {
            if currentText.contains(keyword) && !actionFound {
                keyInfo.append(keyword)
                actionFound = true
                break  // 只取一个动作关键词
            }
        }

        // 保留地点信息（只取第一个匹配的地点关键词）
        var placeFound = false
        for keyword in placeKeywords {
            if currentText.contains(keyword) && !placeFound {
                keyInfo.append(keyword)
                placeFound = true
                break  // 只取一个地点关键词
            }
        }

        // 如果有关键信息，生成简洁描述
        if !keyInfo.isEmpty {
            cleanNote = keyInfo.joined(separator: " ")
        } else {
            // 清理无意义的修饰词
            let unwantedWords = ["块", "元", "花了", "支付", "了", "的", "。", "，", ","]
            for word in unwantedWords {
                cleanNote = cleanNote.replacingOccurrences(of: word, with: " ")
            }

            // 清理空格
            cleanNote = cleanNote
                .components(separatedBy: CharacterSet.whitespacesAndNewlines)
                .filter { !$0.isEmpty && $0.count > 0 }
                .joined(separator: " ")
                .trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)
        }

        // 如果清理后为空或太短，生成更有意义的备注
        var finalNote = cleanNote
        if cleanNote.count < 2 {
            // 尝试从原文本中提取有意义的词汇
            let meaningfulWords = ["吃饭", "午餐", "晚餐", "早餐", "喝茶", "咖啡", "奶茶", "购物", "打车", "地铁", "公交"]
            var foundWord = false
            for word in meaningfulWords {
                if text.contains(word) {
                    finalNote = word
                    foundWord = true
                    break
                }
            }
            
            // 如果没找到有意义的词汇，根据分类生成默认备注
            if !foundWord {
                switch category {
                case "餐饮":
                    finalNote = "用餐"
                case "交通":
                    finalNote = "出行"
                case "购物":
                    finalNote = "购买商品"
                case "娱乐":
                    finalNote = "娱乐消费"
                case "生活":
                    finalNote = "生活用品"
                case "医疗":
                    finalNote = "医疗费用"
                case "教育":
                    finalNote = "学习费用"
                case "租房水电":
                    finalNote = "房租水电"
                default:
                    finalNote = "日常消费"
                }
            }
        }
        
        let note = finalNote
        print("📝 生成备注: \"\(note)\"")
        
        // 智能分类识别 - 按优先级匹配关键词
        // 具体关键词优先级高于通用关键词
        let priorityCategories = [
            ("餐饮", ["奶茶", "咖啡", "茶", "饮料", "吃饭", "午餐", "晚餐", "早餐", "饭", "菜", "餐厅", "外卖", "点餐", "聚餐", "宵夜", "零食", "小吃", "吃了", "吃", "喝了", "喝", "买吃的", "食物", "美食", "用餐", "就餐", "进餐"]),
            ("交通", [
                // 传统交通工具
                "地铁", "公交", "打车", "滴滴", "出租车", "火车", "高铁", "飞机",
                // 共享出行服务
                "共享单车", "摩拜", "哈啰", "青桔", "小蓝车", "ofo", "单车包月", "单车充值",
                "共享汽车", "GoFun", "EVCARD", "盼达", "car2go",
                // 交通卡充值场景  
                "充卡", "地铁充卡", "公交卡充值", "交通卡", "一卡通", "羊城通", "深圳通",
                "交通充值", "地铁充值", "公交充值",
                // 交通套餐服务
                "交通包月", "地铁月卡", "公交月卡", "交通季卡", "交通年卡",
                // 网约车平台
                "美团打车", "曹操出行", "神州专车", "首汽约车", "T3出行",
                // 票务相关
                "机票", "车票", "船票", "地铁票", "公交票", "高铁票", "动车票",
                // 汽车相关
                "加油", "油费", "停车费", "过路费", "高速费", "ETC", "洗车费",
                "汽车保养", "车辆维修", "汽车年检", "车险",
                // 出行费用
                "打车费", "车费", "路费", "交通费", "出行费", "通勤费", "班车费"
            ]),
            ("娱乐", ["电影", "游戏", "KTV", "唱歌", "旅游", "景点", "门票", "酒吧", "娱乐", "看电影", "演出", "音乐会"]),
            ("租房水电", ["房租", "租房", "租房子", "付房租", "交房租", "水电费", "电费", "水费", "燃气费", "取暖费", "物业费", "管理费"]),
            ("生活", ["话费", "网费", "生活用品", "洗衣", "理发", "美容", "按摩"]),
            ("医疗", ["医院", "看病", "药", "体检", "医疗", "挂号", "治疗", "医生"]),
            ("教育", ["学费", "培训", "课程", "书籍", "学习", "教育", "辅导", "考试"]),
            ("购物", [
                // 电商平台
                "淘宝", "京东", "拼多多", "抖音", "天猫", "苏宁", "唯品会", "小红书", "得物", "闲鱼",
                "美团", "饿了么", "盒马", "叮咚买菜", "多点", "永辉生活", "朴朴",
                // 国际电商
                "亚马逊", "ebay", "海淘", "考拉", "洋码头", "iHerb",
                // 垂直电商
                "当当", "网易严选", "小米有品", "华为商城", "Apple Store",
                // 线下购物
                "商场", "超市", "便利店", "商店", "市场", "店铺", "专卖店", "免税店",
                "宜家", "无印良品", "优衣库", "屈臣氏", "万达", "银泰", "大悦城",
                // 商品类别
                "衣服", "鞋子", "包包", "化妆品", "护肤品", "日用品", "电器", "手机", "电脑",
                "数码", "家具", "家电", "零食", "玩具", "文具", "配饰", "珠宝", "手表",
                // 购物行为
                "购物", "网购", "海淘", "代购", "团购", "秒杀", "抢购", "剁手"
            ]),
            ("其他", ["其他", "杂费", "礼物", "红包", "捐赠"])
        ]
        
        // 智能匹配预设分类
        func intelligentCategoryMatch() -> String? {
            // 排除误分类的场景
            let exclusions: [String: [String]] = [
                "交通": ["买单车", "买自行车", "购买单车", "健身卡", "游泳卡", "会员卡"], // 避免购买单车被误分类为交通
                "餐饮": ["买茶具", "买咖啡机", "茶叶", "咖啡豆"] // 避免购买饮品工具被误分类为餐饮
            ]

            // 按优先级顺序匹配预设分类
            for (categoryName, keywords) in priorityCategories {
                // 检查是否应该排除
                if let excludeKeywords = exclusions[categoryName] {
                    var shouldExclude = false
                    for excludeKeyword in excludeKeywords {
                        if text.contains(excludeKeyword) {
                            shouldExclude = true
                            break
                        }
                    }
                    if shouldExclude {
                        continue // 跳过这个分类
                    }
                }

                // 正常匹配逻辑
                for keyword in keywords {
                    if text.contains(keyword) {
                        print("📍 匹配到预设分类关键词: \"\(keyword)\" -> \(categoryName)")
                        return categoryName
                    }
                }
            }
            return nil
        }

        // 匹配用户自定义分类
        func matchCustomCategories() -> String? {
            // 获取所有用户自定义分类（排除默认分类）
            let defaultCategories = ["餐饮", "交通", "购物", "娱乐", "租房水电", "生活", "医疗", "教育", "其他"]
            let customCategories = DataManager.shared.categories.filter { !defaultCategories.contains($0) }

            print("📋 当前自定义分类: \(customCategories)")  // 调试日志

            // 按分类名长度排序，优先匹配较长的分类名（更具体）
            let sortedCategories = customCategories.sorted { $0.count > $1.count }

            // 先进行精确匹配
            for category in sortedCategories {
                print("🔎 尝试匹配分类: \"\(category)\"")  // 调试日志

                let lowercasedText = text.lowercased()
                let lowercasedCategory = category.lowercased()

                // 1. 完全匹配分类名称（忽略大小写）
                if lowercasedText.contains(lowercasedCategory) {
                    print("✨ 完全匹配成功: \(category)")
                    return category
                }

                // 2. 去掉空格后匹配
                let compactCategory = lowercasedCategory.replacingOccurrences(of: " ", with: "")
                if lowercasedText.contains(compactCategory) && compactCategory.count >= 2 {
                    print("✨ 紧凑匹配成功: \(category)")
                    return category
                }
            }

            // 再进行分词匹配
            for category in sortedCategories {
                // 3. 分割分类名称，匹配各个部分
                let categoryWords = category.components(separatedBy: Foundation.CharacterSet(charactersIn: " -_")).filter { $0.count >= 2 }

                // 优先匹配所有关键词都存在的情况
                var allWordsMatch = categoryWords.count > 0
                for word in categoryWords {
                    if !text.lowercased().contains(word.lowercased()) {
                        allWordsMatch = false
                        break
                    }
                }
                if allWordsMatch && categoryWords.count > 0 {
                    print("✨ 全部关键词匹配成功: \(category)")
                    return category
                }
            }

            // 最后进行单词匹配（但需要更严格的条件）
            for category in sortedCategories {
                // 4. 清理文本后匹配
                let cleanedText = text
                    .replacingOccurrences(of: "买", with: "")
                    .replacingOccurrences(of: "购买", with: "")
                    .replacingOccurrences(of: "花钱", with: "")
                    .replacingOccurrences(of: "支付", with: "")
                    .lowercased()

                // 如果分类名称在清理后的文本中完整出现
                if cleanedText.contains(category.lowercased()) {
                    print("✨ 清理后完整匹配成功: \(category)")
                    return category
                }

                // 5. 特殊情况：对于包含特定关键词的分类（如"ai"），即使有"买"也优先匹配
                let importantKeywords = ["ai", "工具", "学习", "课程", "培训"]
                for keyword in importantKeywords {
                    if category.lowercased().contains(keyword) && text.lowercased().contains(keyword) {
                        print("✨ 重要关键词匹配成功: \(keyword) -> \(category)")
                        return category
                    }
                }
            }

            return nil
        }

        // 优化匹配策略：优先匹配用户自定义分类（更具体），再匹配预设分类（更通用）
        print("🔍 语音识别文本: \"\(text)\"")  // 调试日志

        // 第一优先级：匹配用户自定义分类
        category = matchCustomCategories()
        if category != nil {
            print("✅ 匹配到自定义分类: \(category!)")
        }

        // 第二优先级：匹配预设分类
        if category == nil {
            category = intelligentCategoryMatch()
            if category != nil {
                print("✅ 匹配到预设分类: \(category!)")
            }
        }

        // 如果仍没有匹配到分类，默认使用"其他"
        if category == nil {
            category = "其他"
            print("⚠️ 未匹配到任何分类，使用默认分类: 其他")
        }

        // 解析日期信息
        var transactionDate: Date? = nil
        let dateKeywords = [
            "昨天": -1,
            "前天": -2,
            "大前天": -3,
            "今天": 0,
            "明天": 1,
            "后天": 2
        ]

        // 按关键词长度排序，优先匹配较长的关键词
        let sortedKeywords = dateKeywords.sorted { $0.key.count > $1.key.count }

        for (keyword, dayOffset) in sortedKeywords {
            if text.contains(keyword) {
                let calendar = Calendar.current
                transactionDate = calendar.date(byAdding: .day, value: dayOffset, to: Date())
                print("📅 识别到日期关键词'\(keyword)', 设置交易日期为: \(transactionDate?.description ?? "未知")")
                break
            }
        }

        // 如果没有识别到特定日期，使用当前日期
        if transactionDate == nil {
            transactionDate = Date()
            print("📅 未识别到特定日期，使用当前日期")
        }

        print("✅ 单笔交易解析完成: 金额=\(amount ?? 0), 分类=\(category ?? ""), 备注=\(note), 日期=\(transactionDate?.description ?? "未知")")
        return (amount, category, note, transactionDate)
    }
}

// MARK: - Notification Manager
class NotificationManager: ObservableObject {
    static let shared = NotificationManager()

    private init() {}

    func requestAuthorization(completion: @escaping (Bool) -> Void) {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { granted, _ in
            DispatchQueue.main.async {
                completion(granted)
            }
        }
    }

    func scheduleReminders(morningTime: String, afternoonTime: String, eveningTime: String) {
        // 清除现有的提醒
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [
            "morning_reminder", "afternoon_reminder", "evening_reminder"
        ])

        // 上午提醒
        if let morningDate = timeStringToDate(morningTime) {
            scheduleNotification(
                identifier: "morning_reminder",
                title: "🌅 记账提醒",
                body: "早上好，记录一下吃早餐的花费吧~",
                date: morningDate,
                repeats: true
            )
        }

        // 下午提醒
        if let afternoonDate = timeStringToDate(afternoonTime) {
            scheduleNotification(
                identifier: "afternoon_reminder",
                title: "☕ 记账提醒",
                body: "下午茶时间，有什么小消费吗？",
                date: afternoonDate,
                repeats: true
            )
        }

        // 晚上提醒
        if let eveningDate = timeStringToDate(eveningTime) {
            scheduleNotification(
                identifier: "evening_reminder",
                title: "🌙 记账提醒",
                body: "今天过得怎么样，记录一下吧！",
                date: eveningDate,
                repeats: true
            )
        }
    }

    func scheduleBudgetWarning(category: String, percentage: Double) {
        let identifier = "budget_warning_\(category)"

        // 清除旧的警告
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [identifier])

        let title: String
        let body: String

        if percentage >= 0.9 {
            title = "⚠️ 预算超支警告"
            body = "\(category)分类已超出预算，记得理性消费哦~"
        } else {
            title = "🚨 预算提醒"
            body = "\(category)分类已使用\(Int(percentage * 100))%预算，注意合理消费哦 🌈"
        }

        let content = UNMutableNotificationContent()
        content.title = title
        content.body = body
        content.sound = .default

        // 5秒后发送
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)
        let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)

        UNUserNotificationCenter.current().add(request)
    }

    // 自定义预算警告通知
    func scheduleCustomBudgetWarning(customBudget: CustomBudget, percentage: Double) {
        let identifier = "custom_budget_warning_\(customBudget.id.uuidString)"

        // 清除旧的警告
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [identifier])

        let title: String
        let body: String

        if percentage >= 0.9 {
            title = "⚠️ 自定义预算超支警告"
            body = "「\(customBudget.name)」预算已超出90%，当前使用\(Int(percentage * 100))%"
        } else {
            title = "🚨 自定义预算提醒"
            body = "「\(customBudget.name)」预算已使用\(Int(percentage * 100))%，注意合理消费哦 🌈"
        }

        let content = UNMutableNotificationContent()
        content.title = title
        content.body = body
        content.sound = .default
        content.categoryIdentifier = "CUSTOM_BUDGET_WARNING"

        // 添加操作按钮
        let viewAction = UNNotificationAction(
            identifier: "VIEW_BUDGET",
            title: "查看预算",
            options: []
        )

        let dismissAction = UNNotificationAction(
            identifier: "DISMISS",
            title: "知道了",
            options: []
        )

        let category = UNNotificationCategory(
            identifier: "CUSTOM_BUDGET_WARNING",
            actions: [viewAction, dismissAction],
            intentIdentifiers: []
        )

        UNUserNotificationCenter.current().setNotificationCategories([category])

        // 5秒后发送
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)
        let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)

        UNUserNotificationCenter.current().add(request)
    }

    // 自定义预算到期提醒
    func scheduleCustomBudgetExpiryReminder(customBudget: CustomBudget) {
        let calendar = Calendar.current
        let oneDayBefore = calendar.date(byAdding: .day, value: -1, to: customBudget.endDate)

        guard let reminderDate = oneDayBefore, reminderDate > Date() else { return }

        let identifier = "custom_budget_expiry_\(customBudget.id.uuidString)"

        // 清除旧的提醒
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [identifier])

        let content = UNMutableNotificationContent()
        content.title = "⏰ 自定义预算即将到期"
        content.body = "「\(customBudget.name)」将在明天结束，请及时查看使用情况"
        content.sound = .default

        let triggerDate = calendar.dateComponents([.year, .month, .day, .hour, .minute], from: reminderDate)
        let trigger = UNCalendarNotificationTrigger(dateMatching: triggerDate, repeats: false)
        let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)

        UNUserNotificationCenter.current().add(request)
    }

    // 取消自定义预算相关的所有通知
    func cancelCustomBudgetNotifications(budgetId: UUID) {
        let identifiers = [
            "custom_budget_warning_\(budgetId.uuidString)",
            "custom_budget_expiry_\(budgetId.uuidString)"
        ]
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: identifiers)
    }

    func scheduleWeeklyReport(totalExpense: Double) {
        let identifier = "weekly_report"

        let content = UNMutableNotificationContent()
        content.title = "📊 本周支出报告"
        content.body = "本周总支出 ¥\(String(format: "%.0f", totalExpense))，继续加油啊！"
        content.sound = .default

        // 每周日晚上8点
        var dateComponents = DateComponents()
        dateComponents.weekday = 1 // 周日
        dateComponents.hour = 20
        dateComponents.minute = 0

        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
        let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)

        UNUserNotificationCenter.current().add(request)
    }

    private func scheduleNotification(identifier: String, title: String, body: String, date: Date, repeats: Bool) {
        let content = UNMutableNotificationContent()
        content.title = title
        content.body = body
        content.sound = .default

        let calendar = Calendar.current
        let components = calendar.dateComponents([.hour, .minute], from: date)
        let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: repeats)

        let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)
        UNUserNotificationCenter.current().add(request)
    }

    private func timeStringToDate(_ timeString: String) -> Date? {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm"
        return formatter.date(from: timeString)
    }

    func checkNotificationStatus(completion: @escaping (Bool) -> Void) {
        UNUserNotificationCenter.current().getNotificationSettings { settings in
            DispatchQueue.main.async {
                completion(settings.authorizationStatus == .authorized)
            }
        }
    }
}

// MARK: - Onboarding View
struct OnboardingView: View {
    @Binding var showOnboarding: Bool
    @State private var currentPage = 0

    var onboardingPages: [OnboardingPage] {
        return [
            OnboardingPage(
                title: "欢迎使用语音记账本",
                subtitle: "轻松记录每一笔支出",
                description: "只需说话，就能快速记录您的消费，让记账变得简单有趣",
                iconName: "mic.circle.fill",
                iconColor: .blue
            ),
            OnboardingPage(
                title: "智能语音识别",
                subtitle: "支持多种表达方式",
                description: "支持「中午吃饭10块」或「中午和晚上吃饭各15元」等自然语言表达",
                iconName: "waveform.circle.fill",
                iconColor: .green
            ),
            OnboardingPage(
                title: "游戏化体验",
                subtitle: "让记账充满乐趣",
                description: "解锁成就、维持连击，通过游戏化元素培养良好的记账习惯",
                iconName: "trophy.circle.fill",
                iconColor: .orange
            )
        ]
    }

    var body: some View {
        VStack {
            // 页面指示器
            HStack {
                Spacer()
                HStack(spacing: 8) {
                    ForEach(0..<onboardingPages.count, id: \.self) { index in
                        Circle()
                            .fill(currentPage == index ? Color.blue : Color.gray.opacity(0.3))
                            .frame(width: 8, height: 8)
                    }
                }
                Spacer()
            }
            .padding(.top, 50)

            // 页面内容
            TabView(selection: $currentPage) {
                ForEach(0..<onboardingPages.count, id: \.self) { index in
                    OnboardingPageView(page: onboardingPages[index])
                        .tag(index)
                }
            }
            .tabViewStyle(PageTabViewStyle(indexDisplayMode: .never))

            // 底部按钮
            VStack(spacing: 16) {
                if currentPage == onboardingPages.count - 1 {
                    // 最后一页显示开始使用按钮
                    Button(action: {
                        showOnboarding = false
                    }) {
                        Text("开始使用")
                            .font(.headline)
                            .foregroundColor(.white)
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(Color.blue)
                            .cornerRadius(12)
                    }
                } else {
                    // 其他页面显示下一步和跳过
                    HStack {
                        Button("跳过") {
                            showOnboarding = false
                        }
                        .foregroundColor(.gray)

                        Spacer()

                        Button("下一步") {
                            withAnimation(.easeInOut(duration: 0.3)) {
                                currentPage += 1
                            }
                        }
                        .font(.system(size: 17, weight: .semibold))
                        .foregroundColor(.blue)
                    }
                }
            }
            .padding(.horizontal, 24)
            .padding(.bottom, 50)
        }
        .background(Color(UIColor.systemBackground))
    }
}

struct OnboardingPage {
    let title: String
    let subtitle: String
    let description: String
    let iconName: String
    let iconColor: Color
}

struct OnboardingPageView: View {
    let page: OnboardingPage

    var body: some View {
        VStack(spacing: 40) {
            Spacer()

            // 图标
            Image(systemName: page.iconName)
                .font(.system(size: 80))
                .foregroundColor(page.iconColor)

            // 文字内容
            VStack(spacing: 16) {
                Text(page.title)
                    .font(.system(size: 28, weight: .bold))
                    .multilineTextAlignment(.center)

                Text(page.subtitle)
                    .font(.title3)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)

                Text(page.description)
                    .font(.body)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 32)
                    .lineLimit(nil)
            }

            Spacer()
        }
    }
}

// MARK: - Main Content View
struct ContentView: View {
    @State private var selectedTab = 0
    @AppStorage("hasCompletedOnboarding") private var hasCompletedOnboarding = false
    @State private var showOnboarding = false

    var body: some View {
        Group {
            if showOnboarding {
                OnboardingView(showOnboarding: $showOnboarding)
            } else {
                TabView(selection: $selectedTab) {
                    HomeView()
                        .tabItem {
                            Image(systemName: "house.fill")
                            Text("首页")
                        }
                        .tag(0)

                    RecordsView()
                        .tabItem {
                            Image(systemName: "list.bullet")
                            Text("记录")
                        }
                        .tag(1)

                    BudgetView()
                        .tabItem {
                            Image(systemName: "chart.pie.fill")
                            Text("预算")
                        }
                        .tag(2)

                    AnalyticsView()
                        .tabItem {
                            Image(systemName: "chart.bar.fill")
                            Text("统计")
                        }
                        .tag(3)

                    SettingsView()
                        .tabItem {
                            Image(systemName: "gear")
                            Text("设置")
                        }
                        .tag(4)
                }
            }
        }
        .onAppear {
            // 如果用户没有完成引导，显示引导页
            if !hasCompletedOnboarding {
                showOnboarding = true
            }
        }
        .onChange(of: showOnboarding) { newValue in
            // 当引导页关闭时，标记为已完成引导
            if !newValue {
                hasCompletedOnboarding = true
            }
        }
    }
}

// MARK: - Home View
struct HomeView: View {
    @EnvironmentObject var dataManager: DataManager
    @StateObject private var voiceManager = VoiceRecognitionManager()
    @State private var showingAddTransaction = false
    @State private var manualAmount = ""
    @State private var selectedCategory = "餐饮"
    @State private var transactionNote = ""
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // 语音记账卡片
                    VStack(spacing: 15) {
                        Image(systemName: voiceManager.isRecording ? "mic.fill" : "mic")
                            .font(.system(size: 60))
                            .foregroundColor(voiceManager.isRecording ? .red : .blue)
                        
                        Text(voiceManager.isRecording ? "正在录音..." : "点击开始语音记账")
                            .font(.headline)
                        
                        if !voiceManager.recognizedText.isEmpty {
                            Text(voiceManager.recognizedText)
                                .padding()
                                .background(Color.gray.opacity(0.1))
                                .cornerRadius(10)
                        }

                        // 显示错误信息
                        if !voiceManager.errorMessage.isEmpty {
                            Text(voiceManager.errorMessage)
                                .foregroundColor(.red)
                                .padding()
                                .background(Color.red.opacity(0.1))
                                .cornerRadius(10)
                        }
                        
                        Button(action: {
                            if voiceManager.isRecording {
                                voiceManager.stopRecording()
                                // 解析并添加多笔交易
                                print("🔍 开始解析语音文本: \"\(voiceManager.recognizedText)\"")
                                let parsedTransactions = voiceManager.parseMultipleTransactions(from: voiceManager.recognizedText)

                                print("🎯 解析结果: 发现 \(parsedTransactions.count) 笔交易")
                                for (idx, tx) in parsedTransactions.enumerated() {
                                    print("  交易\(idx+1): 金额=\(tx.amount ?? 0), 分类=\(tx.category ?? "未知"), 备注=\(tx.note ?? "")")
                                }

                                for (index, parsed) in parsedTransactions.enumerated() {
                                    if let amount = parsed.amount {
                                        let transaction = Transaction(
                                            amount: amount,
                                            category: parsed.category ?? "其他",
                                            note: parsed.note ?? "",
                                            date: parsed.date ?? Date(),
                                            isExpense: true
                                        )
                                        dataManager.addTransaction(transaction)
                                        let dateFormatter = DateFormatter()
                                        dateFormatter.dateFormat = "M月d日"
                                        let dateString = dateFormatter.string(from: transaction.date)
                                        print("💾 添加第 \(index + 1) 笔交易: \(amount)元 - \(parsed.category ?? "其他") - \(dateString)")
                                    }
                                }

                                // 提供反馈
                                if parsedTransactions.count > 1 {
                                    print("🎉 成功添加 \(parsedTransactions.count) 笔交易")
                                } else if parsedTransactions.count == 1 {
                                    print("✅ 成功添加 1 笔交易")
                                } else {
                                    print("⚠️ 未能识别到有效的交易金额")
                                }
                            } else {
                                voiceManager.startRecording()
                            }
                        }) {
                            Text(voiceManager.isRecording ? "停止录音" : "开始录音")
                                .font(.headline)
                                .padding()
                                .frame(width: 200)
                                .background(voiceManager.isRecording ? Color.red : Color.blue)
                                .foregroundColor(.white)
                                .cornerRadius(25)
                        }
                    }
                    .padding()
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(15)
                    
                    // 手动添加按钮
                    Button(action: { showingAddTransaction = true }) {
                        HStack {
                            Image(systemName: "plus.circle.fill")
                            Text("手动添加记账")
                        }
                        .padding()
                        .background(Color.green)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                    }
                    
                    // 今日概览
                    TodaySummary()

                    // 连击激励卡片
                    StreakMotivationCard()

                    // 活跃自定义预算
                    ActiveCustomBudgets()

                    // 最近交易
                    RecentTransactions()
                }
                .padding()
            }
            .navigationTitle("语音记账")
            .sheet(isPresented: $showingAddTransaction) {
                AddTransactionView(isPresented: $showingAddTransaction)
            }
        }
    }
}

// MARK: - Today Summary
struct TodaySummary: View {
    @EnvironmentObject var dataManager: DataManager
    
    var todayExpense: Double {
        dataManager.todayTransactions
            .filter { $0.isExpense }
            .reduce(0) { $0 + $1.amount }
    }
    
    var remainingBudget: Double {
        dataManager.budget.monthlyLimit - dataManager.monthlyExpense
    }
    
    var body: some View {
        VStack(alignment: .leading, spacing: 10) {
            Text("今日概览")
                .font(.headline)
            
            HStack(spacing: 8) {
                // 今日支出
                VStack(spacing: 4) {
                    Text("今日支出")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                        .minimumScaleFactor(0.8)
                    Text("¥\(String(format: "%.1f", todayExpense))")
                        .font(.system(size: 15, weight: .semibold))
                        .foregroundColor(.red)
                        .minimumScaleFactor(0.7)
                        .lineLimit(1)
                }
                .frame(maxWidth: .infinity)
                
                Divider()
                    .frame(height: 30)
                
                // 本月支出
                VStack(spacing: 4) {
                    Text("本月支出")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                        .minimumScaleFactor(0.8)
                    Text("¥\(String(format: "%.1f", dataManager.monthlyExpense))")
                        .font(.subheadline)
                        .font(.system(size: 16, weight: .semibold))
                        .foregroundColor(.orange)
                        .minimumScaleFactor(0.7)
                        .lineLimit(1)
                }
                .frame(maxWidth: .infinity)
                
                Divider()
                    .frame(height: 30)
                
                // 剩余预算
                VStack(spacing: 4) {
                    Text("剩余预算")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                        .minimumScaleFactor(0.8)
                    Text("¥\(String(format: "%.1f", remainingBudget))")
                        .font(.subheadline)
                        .font(.system(size: 16, weight: .semibold))
                        .foregroundColor(remainingBudget > 0 ? .green : .red)
                        .minimumScaleFactor(0.7)
                        .lineLimit(1)
                }
                .frame(maxWidth: .infinity)

                Divider()
                    .frame(height: 30)

                // 连击天数
                VStack(spacing: 4) {
                    Text("连击天数")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                        .minimumScaleFactor(0.8)
                    HStack(spacing: 2) {
                        Text("🔥")
                            .font(.caption)
                        Text("\(dataManager.userStats.currentStreak)")
                            .font(.subheadline)
                            .font(.system(size: 16, weight: .semibold))
                            .foregroundColor(.orange)
                        Text("天")
                            .font(.caption2)
                            .foregroundColor(.secondary)
                    }
                    .minimumScaleFactor(0.7)
                    .lineLimit(1)
                }
                .frame(maxWidth: .infinity)
            }
            .padding(.horizontal, 12)
            .padding(.vertical, 16)
            .background(Color.gray.opacity(0.08))
            .cornerRadius(12)
            .overlay(
                RoundedRectangle(cornerRadius: 12)
                    .stroke(Color.gray.opacity(0.2), lineWidth: 0.5)
            )
        }
    }
}

// MARK: - Streak Motivation Card
struct StreakMotivationCard: View {
    @EnvironmentObject var dataManager: DataManager

    var motivationMessage: String {
        let streak = dataManager.userStats.currentStreak
        switch streak {
        case 0:
            return "今天就开始记账吧！😊"
        case 1:
            return "太棒了！第一天完成！✨"
        case 2:
            return "很好！记账习惯正在养成💪"
        case 3..<7:
            return "继续加油！你已经连续\(streak)天了🔥"
        case 7..<15:
            return "了不起！\(streak)天的坚持真棒🏆"
        case 15..<30:
            return "习惯大师！\(streak)天的成果令人惊叹🎆"
        default:
            return "记账之王！\(streak)天连击无人能挑战👑"
        }
    }

    var nextMilestone: Int {
        let streak = dataManager.userStats.currentStreak
        if streak < 3 { return 3 }
        if streak < 7 { return 7 }
        if streak < 15 { return 15 }
        if streak < 30 { return 30 }
        return streak + 10 // 超过30天后，每10天为一个里程碑
    }

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text("连击激励")
                    .font(.headline)
                Spacer()
                Text("🎆")
                    .font(.title2)
            }

            VStack(alignment: .leading, spacing: 8) {
                Text(motivationMessage)
                    .font(.body)
                    .foregroundColor(.primary)

                if dataManager.userStats.currentStreak > 0 {
                    let progress = Double(dataManager.userStats.currentStreak) / Double(nextMilestone)
                    let remainingDays = nextMilestone - dataManager.userStats.currentStreak

                    VStack(alignment: .leading, spacing: 4) {
                        HStack {
                            Text("连击进度")
                                .font(.caption)
                                .foregroundColor(.secondary)
                            Spacer()
                            Text("再堅持\(remainingDays)天解锁下个成就")
                                .font(.caption2)
                                .foregroundColor(.blue)
                        }

                        ProgressView(value: progress)
                            .progressViewStyle(LinearProgressViewStyle(tint: .orange))
                            .scaleEffect(y: 1.5)

                        HStack {
                            Text("\(dataManager.userStats.currentStreak)")
                                .font(.caption2)
                                .foregroundColor(.orange)
                                .font(.system(size: 16, weight: .semibold))
                            Spacer()
                            Text("\(nextMilestone)")
                                .font(.caption2)
                                .foregroundColor(.secondary)
                        }
                    }
                }

                if dataManager.userStats.maxStreak > dataManager.userStats.currentStreak {
                    Text("最佳记录：\(dataManager.userStats.maxStreak)天 🎖️")
                        .font(.caption)
                        .foregroundColor(.purple)
                        .font(.system(size: 16, weight: .medium))
                }
            }
        }
        .padding()
        .background(
            LinearGradient(
                gradient: Gradient(colors: [Color.orange.opacity(0.1), Color.yellow.opacity(0.05)]),
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
        )
        .cornerRadius(12)
        .overlay(
            RoundedRectangle(cornerRadius: 12)
                .stroke(Color.orange.opacity(0.3), lineWidth: 1)
        )
    }
}

// MARK: - Active Custom Budgets
struct ActiveCustomBudgets: View {
    @EnvironmentObject var dataManager: DataManager

    private var activeBudgets: [CustomBudget] {
        dataManager.getActiveCustomBudgets().sorted { budget1, budget2 in
            let stats1 = dataManager.getCustomBudgetStats(budget1)
            let stats2 = dataManager.getCustomBudgetStats(budget2)
            return stats1.percentage > stats2.percentage
        }
    }

    var body: some View {
        if !activeBudgets.isEmpty {
            VStack(alignment: .leading, spacing: 12) {
                HStack {
                    Text("活跃预算")
                        .font(.headline)
                    Spacer()
                    Text("\(activeBudgets.count)个进行中")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }

                ForEach(activeBudgets.prefix(2)) { budget in
                    ActiveCustomBudgetCard(budget: budget)
                }

                if activeBudgets.count > 2 {
                    HStack {
                        Spacer()
                        Text("还有\(activeBudgets.count - 2)个预算...")
                            .font(.caption)
                            .foregroundColor(.blue)
                        Spacer()
                    }
                }
            }
            .padding()
            .background(Color.blue.opacity(0.03))
            .cornerRadius(12)
        }
    }
}

struct ActiveCustomBudgetCard: View {
    let budget: CustomBudget
    @EnvironmentObject var dataManager: DataManager

    private var stats: (usedAmount: Double, percentage: Double, daysRemaining: Int) {
        dataManager.getCustomBudgetStats(budget)
    }

    private var progressColor: Color {
        if stats.percentage > 0.9 { return .red }
        if stats.percentage > 0.7 { return .orange }
        return .green
    }

    private func formatDateRange(start: Date, end: Date) -> String {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "zh_CN")

        let calendar = Calendar.current
        if calendar.isDate(start, inSameDayAs: end) {
            // 同一天
            formatter.dateFormat = "M月d日"
            return formatter.string(from: start)
        } else if calendar.component(.year, from: start) == calendar.component(.year, from: end) {
            // 同一年
            formatter.dateFormat = "M月d日"
            let startStr = formatter.string(from: start)
            let endStr = formatter.string(from: end)
            return "\(startStr) - \(endStr)"
        } else {
            // 不同年
            formatter.dateFormat = "yyyy年M月d日"
            let startStr = formatter.string(from: start)
            let endStr = formatter.string(from: end)
            return "\(startStr) - \(endStr)"
        }
    }

    private var statusIcon: String {
        if stats.percentage > 0.9 {
            return "exclamationmark.triangle.fill"
        } else if stats.percentage > 0.7 {
            return "exclamationmark.circle.fill"
        }
        return "checkmark.circle.fill"
    }

    var body: some View {
        HStack(spacing: 12) {
            VStack(alignment: .leading, spacing: 4) {
                HStack {
                    Text(budget.name)
                        .font(.subheadline)
                        .fontWeight(.medium)
                    Spacer()
                    Image(systemName: statusIcon)
                        .foregroundColor(progressColor)
                        .font(.caption)
                }

                HStack {
                    Text("¥\(String(format: "%.0f", stats.usedAmount))")
                        .font(.caption)
                        .fontWeight(.semibold)
                    Text("/")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    Text("¥\(String(format: "%.0f", budget.totalLimit))")
                        .font(.caption)
                        .foregroundColor(.secondary)

                    Spacer()

                    Text("\(stats.daysRemaining)天剩余")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                }

                // 显示时间段
                HStack {
                    Text(formatDateRange(start: budget.startDate, end: budget.endDate))
                        .font(.caption2)
                        .foregroundColor(.secondary)
                    Spacer()
                }

                ProgressView(value: stats.percentage)
                    .progressViewStyle(LinearProgressViewStyle(tint: progressColor))
                    .scaleEffect(y: 0.8)
            }

            VStack(spacing: 2) {
                Text("\(Int(stats.percentage * 100))%")
                    .font(.caption2)
                    .fontWeight(.bold)
                    .foregroundColor(progressColor)
                Text("已用")
                    .font(.caption2)
                    .foregroundColor(.secondary)
            }
            .frame(width: 35)
        }
        .padding(8)
        .background(Color.white)
        .cornerRadius(8)
        .shadow(color: Color.black.opacity(0.05), radius: 2)
    }
}

// MARK: - Recent Transactions
struct RecentTransactions: View {
    @EnvironmentObject var dataManager: DataManager
    
    var recentTransactions: [Transaction] {
        Array(dataManager.transactions.sorted { $0.date > $1.date }.prefix(5))
    }
    
    var body: some View {
        VStack(alignment: .leading, spacing: 10) {
            Text("最近交易")
                .font(.headline)
            
            if recentTransactions.isEmpty {
                Text("暂无交易记录")
                    .foregroundColor(.secondary)
                    .padding()
            } else {
                ForEach(recentTransactions) { transaction in
                    TransactionRow(transaction: transaction)
                }
            }
        }
    }
}

// MARK: - Transaction Row
struct TransactionRow: View {
    let transaction: Transaction
    
    var dateFormatter: DateFormatter {
        let formatter = DateFormatter()
        formatter.dateFormat = "M-d HH:mm"
        return formatter
    }
    
    var body: some View {
        HStack {
            VStack(alignment: .leading) {
                Text(transaction.category)
                    .font(.headline)
                Text(transaction.note)
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .lineLimit(1)
            }
            
            Spacer()
            
            VStack(alignment: .trailing) {
                Text("\(transaction.isExpense ? "-" : "+")¥\(String(format: "%.2f", transaction.amount))")
                    .font(.headline)
                    .foregroundColor(transaction.isExpense ? .red : .green)
                Text(dateFormatter.string(from: transaction.date))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
        }
        .padding()
        .background(Color.gray.opacity(0.05))
        .cornerRadius(10)
    }
}

// MARK: - Add Transaction View
struct AddTransactionView: View {
    @Binding var isPresented: Bool
    @EnvironmentObject var dataManager: DataManager
    
    @State private var amount = ""
    @State private var selectedCategory = "餐饮"
    @State private var note = ""
    @State private var isExpense = true
    @State private var selectedDate = Date()
    
    var body: some View {
        NavigationView {
            Form {
                Section("交易信息") {
                    TextField("金额", text: $amount)
                        .keyboardType(.decimalPad)
                    
                    Picker("类型", selection: $isExpense) {
                        Text("支出").tag(true)
                        Text("收入").tag(false)
                    }
                    .pickerStyle(SegmentedPickerStyle())
                    
                    Picker("分类", selection: $selectedCategory) {
                        ForEach(dataManager.categories, id: \.self) { category in
                            Text(category).tag(category)
                        }
                    }
                    
                    TextField("备注", text: $note)
                    
                    DatePicker("日期", selection: $selectedDate, displayedComponents: [.date, .hourAndMinute])
                }
            }
            .navigationTitle("添加交易")
            // Toolbar disabled for compilation
        }
    }
}

// MARK: - Records View
struct RecordsView: View {
    @EnvironmentObject var dataManager: DataManager
    @State private var searchText = ""
    @State private var selectedCategory: String? = nil
    
    var filteredTransactions: [Transaction] {
        var result = dataManager.transactions
        
        if !searchText.isEmpty {
            result = result.filter {
                $0.note.contains(searchText) || $0.category.contains(searchText)
            }
        }
        
        if let category = selectedCategory {
            result = result.filter { $0.category == category }
        }
        
        return result.sorted { $0.date > $1.date }
    }
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // 搜索栏
                    HStack {
                        Image(systemName: "magnifyingglass")
                            .foregroundColor(.gray)
                        TextField("搜索交易", text: $searchText)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                    }
                    .padding(.horizontal)
                    
                    // 分类筛选
                    ScrollView(.horizontal, showsIndicators: false) {
                        HStack(spacing: 10) {
                            CategoryFilterButton(
                                title: "全部",
                                isSelected: selectedCategory == nil,
                                action: { selectedCategory = nil }
                            )
                            
                            ForEach(dataManager.categories, id: \.self) { category in
                                CategoryFilterButton(
                                    title: category,
                                    isSelected: selectedCategory == category,
                                    action: { selectedCategory = category }
                                )
                            }
                        }
                        .padding(.horizontal)
                    }
                    
                    // 统计信息
                    if !filteredTransactions.isEmpty {
                        HStack {
                            Text("共 \(filteredTransactions.count) 条记录")
                                .font(.caption)
                                .foregroundColor(.secondary)
                            Spacer()
                            Text("总计: ¥\(String(format: "%.2f", filteredTransactions.reduce(0) { $0 + $1.amount })))")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        .padding()
                        .background(Color.gray.opacity(0.1))
                        .cornerRadius(10)
                        .padding(.horizontal)
                    }
                    
                    // 交易记录列表
                    if filteredTransactions.isEmpty {
                        // 空状态
                        VStack(spacing: 20) {
                            Image(systemName: "tray")
                                .font(.system(size: 50))
                                .foregroundColor(.gray.opacity(0.5))
                            Text("暂无交易记录")
                                .font(.headline)
                                .foregroundColor(.gray)
                            Text("开始语音记账或手动添加交易")
                                .font(.subheadline)
                                .foregroundColor(.gray)
                                .multilineTextAlignment(.center)
                        }
                        .padding(.top, 50)
                    } else {
                        // 显示所有交易记录
                        ForEach(filteredTransactions) { transaction in
                            SimpleTransactionRow(transaction: transaction)
                                .padding(.horizontal)
                                .onTapGesture {
                                    // 预留：点击查看详情
                                }
                        }
                    }
                    
                    // 底部间距
                    Spacer(minLength: 100)
                }
                .padding(.top)
            }
            .navigationTitle("交易记录")
        }
    }
}

// MARK: - Simple Transaction Row
struct SimpleTransactionRow: View {
    let transaction: Transaction
    @EnvironmentObject var dataManager: DataManager
    @State private var showingDeleteAlert = false
    
    private var categoryIcon: String {
        switch transaction.category {
        case "餐饮": return "fork.knife"
        case "交通": return "car.fill"
        case "购物": return "bag.fill"
        case "娱乐": return "gamecontroller.fill"
        case "生活": return "house.fill"
        case "医疗": return "cross.case.fill"
        case "教育": return "book.fill"
        default: return "ellipsis.circle.fill"
        }
    }
    
    private var categoryColor: Color {
        switch transaction.category {
        case "餐饮": return .orange
        case "交通": return .blue
        case "购物": return .green
        case "娱乐": return .purple
        case "生活": return Color(red: 0.6, green: 0.4, blue: 0.2)
        case "医疗": return .red
        case "教育": return Color(red: 0.0, green: 0.7, blue: 1.0)
        default: return .gray
        }
    }
    
    var body: some View {
        HStack {
            // 分类图标
            Image(systemName: categoryIcon)
                .font(.title2)
                .foregroundColor(categoryColor)
                .frame(width: 40, height: 40)
                .background(categoryColor.opacity(0.1))
                .clipShape(Circle())
            
            // 交易信息
            VStack(alignment: .leading, spacing: 4) {
                Text(transaction.category)
                    .font(.headline)
                Text(transaction.note)
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .lineLimit(1)
                Text(DateFormatter.transactionDisplay.string(from: transaction.date))
                    .font(.caption2)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
            
            // 金额
            Text("¥\(String(format: "%.2f", transaction.amount))")
                .font(.headline)
                .font(.system(size: 16, weight: .semibold))
                .foregroundColor(categoryColor)
        }
        .padding()
        .background(Color(.systemBackground))
        .cornerRadius(10)
        .shadow(color: .gray.opacity(0.2), radius: 5, x: 0, y: 2)
        .contextMenu {
            Button(action: {
                dataManager.deleteTransaction(transaction)
            }) {
                Label("删除", systemImage: "trash")
            }
        }
    }
}

// MARK: - Date Formatter Extension
extension DateFormatter {
    static let transactionDisplay: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "M月d日 HH:mm"
        formatter.locale = Locale(identifier: "zh_CN")
        return formatter
    }()
}

// MARK: - Category Filter Button
struct CategoryFilterButton: View {
    let title: String
    let isSelected: Bool
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            Text(title)
                .padding(.horizontal, 15)
                .padding(.vertical, 8)
                .background(isSelected ? Color.blue : Color.gray.opacity(0.2))
                .foregroundColor(isSelected ? .white : .primary)
                .cornerRadius(15)
        }
    }
}

// MARK: - Budget View
struct BudgetView: View {
    @EnvironmentObject var dataManager: DataManager
    @State private var editingBudget = false
    @State private var newMonthlyLimit = ""
    @State private var showingAddCustomBudget = false
    
    var budgetProgress: Double {
        min(dataManager.monthlyExpense / dataManager.budget.monthlyLimit, 1.0)
    }
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // 月度预算
                    VStack(spacing: 15) {
                        HStack {
                            VStack(alignment: .leading, spacing: 4) {
                                Text("本月预算")
                                    .font(.headline)
                                Text("(分类预算自动汇总)")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                            Spacer()
                            Button("设置分类预算") { editingBudget = true }
                                .font(.subheadline)
                        }
                        
                        Text("¥\(String(format: "%.0f", dataManager.budget.monthlyLimit))")
                            .font(.largeTitle)
                            .font(.system(size: 18, weight: .bold))
                            .foregroundColor(.blue)
                        
                        ProgressView(value: budgetProgress)
                            .progressViewStyle(LinearProgressViewStyle(tint: budgetProgress > 0.8 ? .red : .blue))
                        
                        HStack {
                            VStack {
                                Text("已用")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Text("¥\(String(format: "%.2f", dataManager.monthlyExpense))")
                                    .font(.system(size: 16, weight: .semibold))
                                    .foregroundColor(.red)
                            }
                            
                            Spacer()
                            
                            VStack {
                                Text("剩余")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Text("¥\(String(format: "%.2f", dataManager.budget.monthlyLimit - dataManager.monthlyExpense))")
                                    .font(.system(size: 16, weight: .semibold))
                                    .foregroundColor(.green)
                            }
                            
                            Spacer()
                            
                            VStack {
                                Text("使用率")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Text("\(Int(budgetProgress * 100))%")
                                    .font(.system(size: 16, weight: .semibold))
                                    .foregroundColor(.orange)
                            }
                        }
                    }
                    .padding()
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(15)

                    // 自定义预算
                    VStack(alignment: .leading, spacing: 15) {
                        HStack {
                            Text("自定义预算")
                                .font(.headline)
                            Spacer()
                            Button("添加预算") {
                                showingAddCustomBudget = true
                            }
                            .font(.subheadline)
                        }

                        if dataManager.budget.customBudgets.isEmpty {
                            VStack(spacing: 10) {
                                Image(systemName: "calendar.circle.fill")
                                    .font(.system(size: 40))
                                    .foregroundColor(.blue.opacity(0.6))
                                Text("暂无自定义预算")
                                    .font(.subheadline)
                                    .foregroundColor(.secondary)
                                Text("点击\"添加预算\"创建短期预算计划")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                    .multilineTextAlignment(.center)
                            }
                            .frame(maxWidth: .infinity)
                            .padding(.vertical, 20)
                        } else {
                            ForEach(dataManager.getAllCustomBudgets(), id: \.id) { customBudget in
                                CustomBudgetCard(customBudget: customBudget)
                                    .environmentObject(dataManager)
                            }
                        }
                    }
                    .padding()
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(15)

                    // 分类预算
                    VStack(alignment: .leading, spacing: 15) {
                        Text("分类预算")
                            .font(.headline)
                        
                        ForEach(dataManager.categories, id: \.self) { category in
                            let limit = dataManager.budget.categoryLimits[category] ?? 0
                            CategoryBudgetRow(
                                category: category,
                                limit: limit,
                                used: dataManager.getCategoryExpense(category: category)
                            )
                        }
                    }
                    .padding()
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(15)
                }
                .padding()
            }
            .navigationTitle("预算管理")
            .sheet(isPresented: $editingBudget) {
                EditBudgetView(isPresented: $editingBudget)
            }
            .sheet(isPresented: $showingAddCustomBudget) {
                AddCustomBudgetView()
            }
        }
    }
}

// MARK: - Custom Budget Card
struct CustomBudgetCard: View {
    let customBudget: CustomBudget
    @EnvironmentObject var dataManager: DataManager
    @State private var showDeleteAlert = false

    var usedAmount: Double {
        customBudget.getUsedAmount(from: dataManager.transactions)
    }

    var progress: Double {
        min(usedAmount / customBudget.totalLimit, 1.0)
    }

    var progressColor: Color {
        if progress > 0.9 { return .red }
        if progress > 0.7 { return .orange }
        return .green
    }

    var statusIcon: String {
        if !customBudget.isActive {
            return "clock.badge.xmark"
        } else if progress > 0.9 {
            return "exclamationmark.triangle.fill"
        } else if progress > 0.7 {
            return "exclamationmark.circle.fill"
        }
        return "checkmark.circle.fill"
    }

    var statusColor: Color {
        if !customBudget.isActive { return .secondary }
        return progressColor
    }

    var daysRemaining: Int {
        dataManager.daysRemaining(until: customBudget.endDate)
    }

    func formatDateRange(start: Date, end: Date) -> String {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "zh_CN")

        let calendar = Calendar.current
        if calendar.isDate(start, inSameDayAs: end) {
            // 同一天
            formatter.dateFormat = "M月d日"
            return formatter.string(from: start)
        } else if calendar.component(.year, from: start) == calendar.component(.year, from: end) {
            // 同一年
            formatter.dateFormat = "M月d日"
            let startStr = formatter.string(from: start)
            let endStr = formatter.string(from: end)
            return "\(startStr) - \(endStr)"
        } else {
            // 不同年
            formatter.dateFormat = "yyyy年M月d日"
            let startStr = formatter.string(from: start)
            let endStr = formatter.string(from: end)
            return "\(startStr) - \(endStr)"
        }
    }

    var body: some View {
        VStack(spacing: 12) {
            // 头部信息
            HStack {
                VStack(alignment: .leading, spacing: 2) {
                    HStack(spacing: 6) {
                        Image(systemName: statusIcon)
                            .foregroundColor(statusColor)
                        Text(customBudget.name)
                            .font(.system(size: 16, weight: .semibold))
                    }

                    if let description = customBudget.description, !description.isEmpty {
                        Text(description)
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }

                Spacer()

                VStack(alignment: .trailing, spacing: 2) {
                    if customBudget.isActive {
                        Text("\(daysRemaining) 天剩余")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    } else {
                        Text("已结束")
                            .font(.caption)
                            .foregroundColor(.red)
                    }

                    Text(formatDateRange(start: customBudget.startDate, end: customBudget.endDate))
                        .font(.caption2)
                        .foregroundColor(.secondary)

                    Text("¥\(String(format: "%.0f", customBudget.totalLimit))")
                        .font(.system(size: 14, weight: .semibold))
                        .foregroundColor(.blue)
                }
            }

            // 进度条
            ProgressView(value: progress)
                .progressViewStyle(LinearProgressViewStyle(tint: progressColor))

            // 统计信息
            HStack {
                VStack(alignment: .leading, spacing: 2) {
                    Text("已用")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    Text("¥\(String(format: "%.2f", usedAmount))")
                        .font(.system(size: 14, weight: .semibold))
                        .foregroundColor(.red)
                }

                Spacer()

                VStack(alignment: .trailing, spacing: 2) {
                    Text("剩余")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    Text("¥\(String(format: "%.2f", customBudget.totalLimit - usedAmount))")
                        .font(.system(size: 14, weight: .semibold))
                        .foregroundColor(.green)
                }

                Spacer()

                VStack(alignment: .trailing, spacing: 2) {
                    Text("使用率")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    Text("\(Int(progress * 100))%")
                        .font(.system(size: 14, weight: .semibold))
                        .foregroundColor(progressColor)
                }
            }
        }
        .padding(.vertical, 12)
        .padding(.horizontal, 16)
        .background(
            RoundedRectangle(cornerRadius: 10)
                .fill(customBudget.isActive ? Color.white : Color.gray.opacity(0.1))
                .shadow(color: .black.opacity(0.1), radius: 2, x: 0, y: 1)
        )
        .opacity(customBudget.isActive ? 1.0 : 0.7)
        .contextMenu {
            if !customBudget.isActive {
                Button("删除", role: .destructive) {
                    showDeleteAlert = true
                }
            }
        }
        .alert("删除预算", isPresented: $showDeleteAlert) {
            Button("取消", role: .cancel) { }
            Button("删除", role: .destructive) {
                dataManager.deleteCustomBudget(customBudget)
            }
        } message: {
            Text("确定要删除「\(customBudget.name)」预算吗？此操作不可撤销。")
        }
    }
}

// MARK: - Category Budget Row
struct CategoryBudgetRow: View {
    let category: String
    let limit: Double
    let used: Double
    
    var progress: Double {
        limit > 0 ? min(used / limit, 1.0) : 0
    }
    
    var progressColor: Color {
        if progress > 0.9 { return .red }
        if progress > 0.7 { return .orange }
        return .blue
    }
    
    var body: some View {
        VStack(spacing: 8) {
            HStack {
                Text(category)
                    .font(.system(size: 16, weight: .medium))
                Spacer()
                if limit > 0 {
                    VStack(alignment: .trailing, spacing: 2) {
                        Text("¥\(String(format: "%.0f", used)) / ¥\(String(format: "%.0f", limit))")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                        Text("\(Int(progress * 100))%")
                            .font(.system(size: 12, weight: .medium))
                            .foregroundColor(progressColor)
                    }
                } else {
                    VStack(alignment: .trailing, spacing: 2) {
                        Text("未设置预算")
                            .font(.caption)
                            .foregroundColor(.orange)
                            .italic()
                        Text("0%")
                            .font(.caption)
                            .foregroundColor(.gray)
                    }
                }
            }
            
            if limit > 0 {
                ProgressView(value: progress)
                    .progressViewStyle(LinearProgressViewStyle(tint: progressColor))
            } else {
                Rectangle()
                    .fill(Color.gray.opacity(0.2))
                    .frame(height: 6)
                    .cornerRadius(3)
                    .overlay(
                        Text("点击设置预算以启用进度跟踪")
                            .font(.caption2)
                            .foregroundColor(.gray)
                    )
            }
        }
    }
}

// MARK: - Edit Budget View
struct EditBudgetView: View {
    @Binding var isPresented: Bool
    @EnvironmentObject var dataManager: DataManager
    @State private var categoryLimits: [String: String] = [:]
    
    // 计算分类预算总和
    var calculatedTotalBudget: Double {
        return categoryLimits.compactMap { Double($0.value) }.reduce(0, +)
    }
    
    var body: some View {
        NavigationView {
            Form {
                Section("分类预算设置") {
                    ForEach(dataManager.categories, id: \.self) { category in
                        HStack {
                            Text(category)
                                .font(.subheadline)
                            Spacer()
                            TextField("0", text: Binding(
                                get: { categoryLimits[category] ?? "" },
                                set: { categoryLimits[category] = $0 }
                            ))
                            .keyboardType(.decimalPad)
                            .multilineTextAlignment(.trailing)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                            .frame(width: 80)
                            Text("元")
                                .foregroundColor(.secondary)
                                .font(.caption)
                        }
                    }
                }
                
                Section("预算汇总") {
                    HStack {
                        Text("月度总预算")
                            .font(.headline)
                        Spacer()
                        Text("¥\(String(format: "%.0f", calculatedTotalBudget))")
                            .font(.title2)
                            .font(.system(size: 18, weight: .bold))
                            .foregroundColor(.blue)
                    }
                    .padding(.vertical, 8)
                    
                    if calculatedTotalBudget == 0 {
                        Text("请设置各分类预算")
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .italic()
                    } else {
                        Text("各分类预算自动累计为月度总预算")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
                
                Section("快速设置") {
                    VStack(spacing: 12) {
                        Text("推荐预算分配（基于¥3000总预算）")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        
                        Button("应用推荐分配") {
                            categoryLimits = [
                                "餐饮": "900",  // 30%
                                "交通": "450",  // 15%
                                "购物": "600",  // 20%
                                "娱乐": "300",  // 10%
                                "生活": "450",  // 15%
                                "医疗": "150",  // 5%
                                "教育": "120",  // 4%
                                "其他": "30"    // 1%
                            ]
                        }
                        .foregroundColor(.blue)
                    }
                    .padding(.vertical, 8)
                }

                // 底部按钮区域
                Section {
                    HStack(spacing: 20) {
                        Button("取消") {
                            isPresented = false
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color(.systemGray5))
                        .foregroundColor(.primary)
                        .cornerRadius(10)

                        Button("保存") {
                            // 保存分类预算
                            for (category, limitStr) in categoryLimits {
                                if let limit = Double(limitStr), limit > 0 {
                                    dataManager.budget.categoryLimits[category] = limit
                                } else {
                                    dataManager.budget.categoryLimits[category] = 0
                                }
                            }

                            // 清理不存在的分类预算
                            let validCategories = Set(dataManager.categories)
                            dataManager.budget.categoryLimits = dataManager.budget.categoryLimits.filter { validCategories.contains($0.key) }

                            // 自动计算并设置月度总预算
                            dataManager.budget.monthlyLimit = calculatedTotalBudget

                            // 保存数据到本地
                            dataManager.saveData()

                            isPresented = false
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                    }
                    .padding(.horizontal)
                }
            }
            .navigationTitle("预算设置")
        }
        .onAppear {
            // 初始化分类预算数据
            for category in dataManager.categories {
                let limit = dataManager.budget.categoryLimits[category] ?? 0
                categoryLimits[category] = limit > 0 ? "\(Int(limit))" : ""
            }
        }
    }
}

// MARK: - Add Custom Budget View
struct AddCustomBudgetView: View {
    @EnvironmentObject var dataManager: DataManager
    @Environment(\.dismiss) private var dismiss

    @State private var budgetName: String = ""
    @State private var startDate: Date = Date()
    @State private var endDate: Date = Calendar.current.date(byAdding: .day, value: 7, to: Date()) ?? Date()
    @State private var totalLimit: String = ""
    @State private var description: String = ""
    @State private var showingAlert: Bool = false
    @State private var alertMessage: String = ""

    private var isFormValid: Bool {
        !budgetName.trimmingCharacters(in: .whitespaces).isEmpty &&
        startDate < endDate &&
        !totalLimit.isEmpty &&
        Double(totalLimit) != nil &&
        (Double(totalLimit) ?? 0) > 0
    }

    private var nameIsDuplicate: Bool {
        dataManager.isCustomBudgetNameDuplicate(budgetName.trimmingCharacters(in: .whitespaces), excludingId: nil)
    }

    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("预算信息")) {
                    TextField("预算名称", text: $budgetName)
                        .textFieldStyle(RoundedBorderTextFieldStyle())

                    if nameIsDuplicate && !budgetName.trimmingCharacters(in: .whitespaces).isEmpty {
                        Text("预算名称已存在")
                            .foregroundColor(.red)
                            .font(.caption)
                    }
                }

                Section(header: Text("预算时间")) {
                    DatePicker("开始日期", selection: $startDate, displayedComponents: .date)
                        .datePickerStyle(CompactDatePickerStyle())

                    DatePicker("结束日期", selection: $endDate, in: startDate..., displayedComponents: .date)
                        .datePickerStyle(CompactDatePickerStyle())

                    HStack {
                        Text("预算天数")
                        Spacer()
                        Text("\(budgetDuration(start: startDate, end: endDate)) 天")
                            .foregroundColor(.secondary)
                    }
                }

                Section(header: Text("预算限制")) {
                    HStack {
                        Text("¥")
                        TextField("总预算限制", text: $totalLimit)
                            .keyboardType(.decimalPad)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                    }

                    if !totalLimit.isEmpty && (Double(totalLimit) ?? 0) <= 0 {
                        Text("预算金额必须大于0")
                            .foregroundColor(.red)
                            .font(.caption)
                    }
                }

                Section(header: Text("备注 (可选)")) {
                    TextField("预算描述", text: $description)
                        .lineLimit(3)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                }

                Section {
                    Button("创建预算") {
                        createCustomBudget()
                    }
                    .disabled(!isFormValid || nameIsDuplicate)
                    .foregroundColor(isFormValid && !nameIsDuplicate ? .blue : .gray)
                }
            }
            .navigationTitle("新建自定义预算")
            .navigationBarTitleDisplayMode(.inline)
            // Toolbar temporarily disabled for compilation
            .alert("提示", isPresented: $showingAlert) {
                Button("确定", role: .cancel) { }
            } message: {
                Text(alertMessage)
            }
            .onAppear {
                // 设置默认结束日期为7天后
                endDate = Calendar.current.date(byAdding: .day, value: 7, to: startDate) ?? startDate
            }
        }
    }

    /// 计算预算持续天数（包含起始和结束日期）
    private func budgetDuration(start: Date, end: Date) -> Int {
        let calendar = Calendar.current
        let components = calendar.dateComponents([.day], from: calendar.startOfDay(for: start), to: calendar.startOfDay(for: end))
        return (components.day ?? 0) + 1
    }

    private func createCustomBudget() {
        guard isFormValid && !nameIsDuplicate else { return }

        guard let limitAmount = Double(totalLimit) else {
            showAlert(message: "请输入有效的预算金额")
            return
        }

        let trimmedName = budgetName.trimmingCharacters(in: .whitespaces)
        let trimmedDescription = description.trimmingCharacters(in: .whitespaces)

        let customBudget = CustomBudget(
            name: trimmedName,
            startDate: startDate,
            endDate: endDate,
            totalLimit: limitAmount,
            categoryLimits: nil,
            description: trimmedDescription.isEmpty ? nil : trimmedDescription
        )

        dataManager.addCustomBudget(customBudget)

        // 安排到期提醒通知
        NotificationManager.shared.scheduleCustomBudgetExpiryReminder(customBudget: customBudget)

        dismiss()
    }

    private func showAlert(message: String) {
        alertMessage = message
        showingAlert = true
    }
}

// MARK: - Analytics View
struct AnalyticsView: View {
    @EnvironmentObject var dataManager: DataManager
    
    var categoryExpenses: [(String, Double)] {
        dataManager.categories.map { category in
            (category, dataManager.getCategoryExpense(category: category))
        }.filter { $0.1 > 0 }
    }
    
    var totalExpense: Double {
        categoryExpenses.reduce(0) { $0 + $1.1 }
    }
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // 月度总览
                    VStack(spacing: 15) {
                        Text("本月支出")
                            .font(.headline)
                        
                        Text("¥\(String(format: "%.2f", dataManager.monthlyExpense))")
                            .font(.largeTitle)
                            .font(.system(size: 18, weight: .bold))
                            .foregroundColor(.red)
                        
                        HStack {
                            VStack {
                                Text("日均支出")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Text("¥\(String(format: "%.2f", dataManager.dailyAverageExpense))")
                                    .font(.system(size: 16, weight: .semibold))
                            }
                            
                            Spacer()
                            
                            VStack {
                                Text("交易笔数")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Text("\(dataManager.transactions.filter { $0.isExpense }.count)")
                                    .font(.system(size: 16, weight: .semibold))
                            }
                        }
                    }
                    .padding()
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(15)
                    
                    // 分类统计
                    VStack(alignment: .leading, spacing: 15) {
                        Text("分类支出")
                            .font(.headline)
                        
                        ForEach(categoryExpenses.sorted { $0.1 > $1.1 }, id: \.0) { category, expense in
                            HStack {
                                Text(category)
                                    .font(.system(size: 16, weight: .medium))
                                
                                Spacer()
                                
                                VStack(alignment: .trailing) {
                                    Text("¥\(String(format: "%.2f", expense))")
                                        .font(.system(size: 16, weight: .semibold))
                                    Text("\(Int((expense / totalExpense) * 100))%")
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                }
                            }
                            .padding(.vertical, 5)
                        }
                    }
                    .padding()
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(15)
                }
                .padding()
            }
            .navigationTitle("数据统计")
        }
    }
}

// MARK: - Settings View
struct SettingsView: View {
    @EnvironmentObject var dataManager: DataManager
    @AppStorage("voiceEnabled") private var voiceEnabled = true
    @AppStorage("budgetReminder") private var budgetReminder = true
    @AppStorage("hasCompletedOnboarding") private var hasCompletedOnboarding = true
    @State private var showingClearAlert = false
    @State private var showingCategoryManager = false
    @State private var showOnboarding = false
    
    var body: some View {
        NavigationView {
            List {
                Section("语音设置") {
                    Toggle("启用语音识别", isOn: $voiceEnabled)
                }
                
                Section("预算设置") {
                    Toggle("预算提醒", isOn: $budgetReminder)
                }

                Section("通知设置") {
                    NavigationLink(destination: NotificationSettingsView()) {
                        HStack {
                            Image(systemName: "bell.fill")
                                .foregroundColor(.red)
                            VStack(alignment: .leading) {
                                Text("提醒通知")
                                Text(dataManager.appSettings.notificationsEnabled ? "已开启" : "已关闭")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                        }
                    }
                }

                Section("应用引导") {
                    Button(action: {
                        showOnboarding = true
                    }) {
                        HStack {
                            Image(systemName: "questionmark.circle.fill")
                                .foregroundColor(.blue)
                            Text("重新显示使用引导")
                                .foregroundColor(.primary)
                            Spacer()
                            Image(systemName: "chevron.right")
                                .foregroundColor(.gray)
                                .font(.caption)
                        }
                    }
                }

                Section("成就系统") {
                    NavigationLink(destination: AchievementView()) {
                        HStack {
                            Image(systemName: "trophy.fill")
                                .foregroundColor(.orange)
                            VStack(alignment: .leading) {
                                Text("成就徽章")
                                Text("已解锁 \(dataManager.achievements.filter { $0.isUnlocked }.count)/\(dataManager.achievements.count)")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                            Spacer()
                            if dataManager.userStats.currentStreak > 0 {
                                VStack {
                                    Text("🔥")
                                    Text("\(dataManager.userStats.currentStreak)")
                                        .font(.caption)
                                        .font(.system(size: 18, weight: .bold))
                                }
                            }
                        }
                    }
                }
                
                Section("分类管理") {
                    NavigationLink(destination: CategoryManagerView()) {
                        HStack {
                            Image(systemName: "folder.fill")
                                .foregroundColor(.blue)
                            Text("管理分类")
                        }
                    }
                    
                    HStack {
                        Text("当前分类数")
                        Spacer()
                        Text("\(dataManager.categories.count)")
                            .foregroundColor(.secondary)
                    }
                }
                
                Section("数据管理") {
                    NavigationLink(destination: ExportDataView()) {
                        HStack {
                            Image(systemName: "square.and.arrow.up")
                                .foregroundColor(.blue)
                            VStack(alignment: .leading) {
                                Text("数据导出")
                                Text("导出记账数据为 CSV 或文本格式")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                        }
                    }

                    Button(action: { showingClearAlert = true }) {
                        Text("清空所有数据")
                            .foregroundColor(.red)
                    }
                }
                
                Section("关于") {
                    HStack {
                        Text("版本")
                        Spacer()
                        VStack(alignment: .trailing) {
                            Text("1.0.6")
                                .foregroundColor(.secondary)
                            Text("功能完整版")
                                .font(.caption2)
                                .foregroundColor(.blue)
                        }
                    }
                    
                    HStack {
                        Text("记录总数")
                        Spacer()
                        Text("\(dataManager.transactions.count)")
                            .foregroundColor(.secondary)
                    }
                    
                    HStack {
                        Text("分类数量")
                        Spacer()
                        Text("\(dataManager.categories.count)")
                            .foregroundColor(.secondary)
                    }
                    
                    HStack {
                        Text("支持系统")
                        Spacer()
                        Text("iOS 14.0+")
                            .foregroundColor(.secondary)
                    }
                }
            }
            .navigationTitle("设置")
            .alert(isPresented: $showingClearAlert) {
                Alert(
                    title: Text("清空数据"),
                    message: Text("确定要清空所有交易记录吗？此操作不可恢复。"),
                    primaryButton: .destructive(Text("清空")) {
                        dataManager.transactions.removeAll()
                        dataManager.saveData()
                    },
                    secondaryButton: .cancel(Text("取消"))
                )
            }
            .sheet(isPresented: $showOnboarding) {
                OnboardingView(showOnboarding: $showOnboarding)
            }
        }
    }
}

// MARK: - Category Manager View
struct CategoryManagerView: View {
    @EnvironmentObject var dataManager: DataManager
    @Environment(\.presentationMode) var presentationMode
    @State private var newCategoryName = ""
    @State private var showingDeleteAlert = false
    @State private var selectedCategory = ""
    @State private var editingCategory: String? = nil
    @State private var editingCategoryName = ""
    
    var body: some View {
        List {
            Section("添加新分类") {
                HStack {
                    TextField("输入分类名称", text: $newCategoryName)
                    Button("添加") {
                        if !newCategoryName.isEmpty {
                            dataManager.addCategory(newCategoryName)
                            newCategoryName = ""
                        }
                    }
                    .disabled(newCategoryName.isEmpty)
                }
            }
            
            Section("当前分类") {
                ForEach(dataManager.categories, id: \.self) { category in
                    HStack {
                        if editingCategory == category {
                            TextField("分类名称", text: $editingCategoryName)
                                .textFieldStyle(RoundedBorderTextFieldStyle())
                        } else {
                            Text(category)
                                .font(.subheadline)
                        }
                        
                        Spacer()
                        
                        // 显示使用此分类的交易数量
                        let transactionCount = dataManager.transactions.filter { $0.category == category }.count
                        if transactionCount > 0 {
                            Text("\(transactionCount)条记录")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        
                        if editingCategory == category {
                            Button("保存") {
                                if !editingCategoryName.isEmpty && editingCategoryName != category {
                                    dataManager.updateCategory(oldName: category, newName: editingCategoryName)
                                }
                                editingCategory = nil
                            }
                            .foregroundColor(.green)
                            .font(.caption)
                            
                            Button("取消") {
                                editingCategory = nil
                            }
                            .foregroundColor(.red)
                            .font(.caption)
                        } else {
                            Button("编辑") {
                                editingCategory = category
                                editingCategoryName = category
                            }
                            .foregroundColor(.blue)
                            .font(.caption)
                        }
                    }
                    .contextMenu {
                        Button("重命名") {
                            editingCategory = category
                            editingCategoryName = category
                        }
                        
                        Button("删除") {
                            selectedCategory = category
                            showingDeleteAlert = true
                        }
                        .foregroundColor(.red)
                    }
                }
            }
            
            Section("使用说明") {
                VStack(alignment: .leading, spacing: 8) {
                    Text("• 点击'编辑'可直接修改分类名")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    Text("• 长按分类可显示快捷菜单")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    Text("• 有交易记录的分类不能删除")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    Text("• 重命名会自动更新所有记录")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                .padding(.vertical, 4)
            }
        }
        .navigationTitle("分类管理")
        // Toolbar disabled for compilation
        .alert(isPresented: $showingDeleteAlert) {
            let hasTransactions = dataManager.transactions.contains { $0.category == selectedCategory }
            if hasTransactions {
                return Alert(
                    title: Text("删除分类"),
                    message: Text("此分类还有交易记录，无法删除。请先删除或修改相关交易。"),
                    dismissButton: .default(Text("确定"))
                )
            } else {
                return Alert(
                    title: Text("删除分类"),
                    message: Text("确定要删除分类'\(selectedCategory)'吗？"),
                    primaryButton: .destructive(Text("删除")) {
                        dataManager.deleteCategory(selectedCategory)
                    },
                    secondaryButton: .cancel(Text("取消"))
                )
            }
        }
    }
}

// MARK: - Notification Settings View
struct NotificationSettingsView: View {
    @EnvironmentObject var dataManager: DataManager
    @State private var showingPermissionAlert = false

    var body: some View {
        NavigationView {
            List {
                Section("通知权限") {
                    HStack {
                        Text("通知权限")
                        Spacer()
                        Button(dataManager.appSettings.notificationsEnabled ? "已授权" : "请求授权") {
                            if !dataManager.appSettings.notificationsEnabled {
                                requestNotificationPermission()
                            }
                        }
                        .foregroundColor(dataManager.appSettings.notificationsEnabled ? .green : .blue)
                    }

                    Text("请允许 VoiceBudget 发送通知，以便提醒您记账和预算管理")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }

                if dataManager.appSettings.notificationsEnabled {
                    Section("记账提醒") {
                        Toggle("上午提醒", isOn: Binding(
                            get: { dataManager.appSettings.morningReminderEnabled },
                            set: { newValue in
                                dataManager.appSettings.morningReminderEnabled = newValue
                                updateReminders()
                                dataManager.saveData()
                            }
                        ))

                        if dataManager.appSettings.morningReminderEnabled {
                            HStack {
                                Text("上午时间")
                                Spacer()
                                Text(dataManager.appSettings.morningReminderTime)
                                    .foregroundColor(.secondary)
                            }
                        }

                        Toggle("下午提醒", isOn: Binding(
                            get: { dataManager.appSettings.afternoonReminderEnabled },
                            set: { newValue in
                                dataManager.appSettings.afternoonReminderEnabled = newValue
                                updateReminders()
                                dataManager.saveData()
                            }
                        ))

                        if dataManager.appSettings.afternoonReminderEnabled {
                            HStack {
                                Text("下午时间")
                                Spacer()
                                Text(dataManager.appSettings.afternoonReminderTime)
                                    .foregroundColor(.secondary)
                            }
                        }

                        Toggle("晚上提醒", isOn: Binding(
                            get: { dataManager.appSettings.eveningReminderEnabled },
                            set: { newValue in
                                dataManager.appSettings.eveningReminderEnabled = newValue
                                updateReminders()
                                dataManager.saveData()
                            }
                        ))

                        if dataManager.appSettings.eveningReminderEnabled {
                            HStack {
                                Text("晚上时间")
                                Spacer()
                                Text(dataManager.appSettings.eveningReminderTime)
                                    .foregroundColor(.secondary)
                            }
                        }
                    }

                    Section("预算警告") {
                        Toggle("预算警告通知", isOn: Binding(
                            get: { dataManager.appSettings.budgetWarningEnabled },
                            set: { newValue in
                                dataManager.appSettings.budgetWarningEnabled = newValue
                                dataManager.saveData()
                            }
                        ))

                        Text("当支出达到预算70%和90%时，会发送提醒通知")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }

                    Section("其他通知") {
                        Toggle("周报通知", isOn: Binding(
                            get: { dataManager.appSettings.weeklyReportEnabled },
                            set: { newValue in
                                dataManager.appSettings.weeklyReportEnabled = newValue
                                if newValue {
                                    // 计算本周支出并设置通知
                                    let weeklyExpense = calculateWeeklyExpense()
                                    NotificationManager.shared.scheduleWeeklyReport(totalExpense: weeklyExpense)
                                }
                                dataManager.saveData()
                            }
                        ))

                        Text("每周日晚上8点发送周支出报告")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
            }
            .navigationTitle("通知设置")
            .onAppear {
                checkNotificationStatus()
            }
            .alert(isPresented: $showingPermissionAlert) {
                Alert(
                    title: Text("通知权限"),
                    message: Text("请在设置中允许 VoiceBudget 发送通知"),
                    dismissButton: .default(Text("好的"))
                )
            }
        }
    }

    private func requestNotificationPermission() {
        NotificationManager.shared.requestAuthorization { granted in
            dataManager.appSettings.notificationsEnabled = granted
            dataManager.saveData()

            if granted {
                updateReminders()
            } else {
                showingPermissionAlert = true
            }
        }
    }

    private func checkNotificationStatus() {
        NotificationManager.shared.checkNotificationStatus { authorized in
            dataManager.appSettings.notificationsEnabled = authorized
            dataManager.saveData()
        }
    }

    private func updateReminders() {
        guard dataManager.appSettings.notificationsEnabled else { return }

        let morningTime = dataManager.appSettings.morningReminderEnabled ? dataManager.appSettings.morningReminderTime : ""
        let afternoonTime = dataManager.appSettings.afternoonReminderEnabled ? dataManager.appSettings.afternoonReminderTime : ""
        let eveningTime = dataManager.appSettings.eveningReminderEnabled ? dataManager.appSettings.eveningReminderTime : ""

        NotificationManager.shared.scheduleReminders(
            morningTime: morningTime,
            afternoonTime: afternoonTime,
            eveningTime: eveningTime
        )
    }

    private func calculateWeeklyExpense() -> Double {
        let calendar = Calendar.current
        let now = Date()
        let weekAgo = calendar.date(byAdding: .day, value: -7, to: now) ?? now

        return dataManager.transactions
            .filter { $0.date >= weekAgo && $0.isExpense }
            .reduce(0) { $0 + $1.amount }
    }
}

// MARK: - Achievement View
struct AchievementView: View {
    @EnvironmentObject var dataManager: DataManager

    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // 统计卡片
                    VStack(spacing: 12) {
                        HStack {
                            VStack(alignment: .leading) {
                                Text("当前连击")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Text("\(dataManager.userStats.currentStreak) 天")
                                    .font(.title2)
                                    .font(.system(size: 18, weight: .bold))
                                    .foregroundColor(.orange)
                            }

                            Spacer()

                            VStack(alignment: .trailing) {
                                Text("最长连击")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Text("\(dataManager.userStats.maxStreak) 天")
                                    .font(.title2)
                                    .font(.system(size: 18, weight: .bold))
                                    .foregroundColor(.blue)
                            }
                        }

                        Divider()

                        HStack {
                            VStack(alignment: .leading) {
                                Text("总记账次数")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Text("\(dataManager.userStats.totalTransactions)")
                                    .font(.title2)
                                    .font(.system(size: 18, weight: .bold))
                                    .foregroundColor(.green)
                            }

                            Spacer()

                            VStack(alignment: .trailing) {
                                Text("已解锁成就")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Text("\(dataManager.achievements.filter { $0.isUnlocked }.count)/\(dataManager.achievements.count)")
                                    .font(.title2)
                                    .font(.system(size: 18, weight: .bold))
                                    .foregroundColor(.purple)
                            }
                        }
                    }
                    .padding()
                    .background(Color(.systemGray6))
                    .cornerRadius(12)
                    .padding(.horizontal)

                    // 成就列表
                    LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2), spacing: 16) {
                        ForEach(dataManager.achievements) { achievement in
                            AchievementCard(achievement: achievement)
                        }
                    }
                    .padding(.horizontal)
                }
            }
            .navigationTitle("成就徽章")
            .alert(isPresented: $dataManager.showAchievementAlert) {
                if let achievement = dataManager.newAchievement {
                    return Alert(
                        title: Text("🏆 成就解锁！"),
                        message: Text("恭喜您获得\"\(achievement.name)\"成就！\n\(achievement.description)"),
                        dismissButton: .default(Text("太棒了！"))
                    )
                } else {
                    return Alert(title: Text("成就解锁"))
                }
            }
        }
    }
}

struct AchievementCard: View {
    let achievement: Achievement

    var body: some View {
        VStack(spacing: 8) {
            Text(achievement.icon)
                .font(.system(size: 40))
                .opacity(achievement.isUnlocked ? 1.0 : 0.3)

            Text(achievement.name)
                .font(.headline)
                .foregroundColor(achievement.isUnlocked ? .primary : .secondary)

            Text(achievement.description)
                .font(.caption)
                .multilineTextAlignment(.center)
                .foregroundColor(.secondary)
                .lineLimit(2)

            if achievement.isUnlocked, let unlockedAt = achievement.unlockedAt {
                Text("解锁日期")
                    .font(.caption2)
                    .foregroundColor(.secondary)
                Text(DateFormatter.short.string(from: unlockedAt))
                    .font(.caption2)
                    .foregroundColor(.blue)
            } else {
                Text("未解锁")
                    .font(.caption2)
                    .foregroundColor(.secondary)
                    .padding(.vertical, 2)
            }
        }
        .padding()
        .frame(maxWidth: .infinity, minHeight: 140)
        .background(achievement.isUnlocked ? Color.blue.opacity(0.1) : Color(.systemGray6))
        .cornerRadius(12)
        .overlay(
            RoundedRectangle(cornerRadius: 12)
                .stroke(achievement.isUnlocked ? Color.blue.opacity(0.3) : Color.clear, lineWidth: 2)
        )
        .scaleEffect(achievement.isUnlocked ? 1.0 : 0.95)
        .animation(.easeInOut(duration: 0.2), value: achievement.isUnlocked)
    }
}

// MARK: - Extensions
extension DateFormatter {
    static let short: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.locale = Locale(identifier: "zh_CN")
        return formatter
    }()
}

// MARK: - Export Data View
struct ExportDataView: View {
    @EnvironmentObject var dataManager: DataManager
    @State private var selectedDateRange: ExportData.DateRange = .thisMonth
    @State private var selectedFormat: ExportData.ExportFormat = .csv
    @State private var showingActivityView = false
    @State private var exportedFileURL: URL?
    @State private var previewData: String = ""
    @State private var showingPreview = false

    var filteredTransactions: [Transaction] {
        dataManager.getTransactionsForExport(dateRange: selectedDateRange)
    }

    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // 数据统计卡片
                    VStack(spacing: 12) {
                        Text("导出数据预览")
                            .font(.headline)

                        HStack {
                            VStack {
                                Text("\(filteredTransactions.count)")
                                    .font(.title2)
                                    .font(.system(size: 18, weight: .bold))
                                    .foregroundColor(.blue)
                                Text("交易数量")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                            .frame(maxWidth: .infinity)

                            Divider()
                                .frame(height: 40)

                            VStack {
                                let totalExpense = filteredTransactions.filter { $0.isExpense }.reduce(0) { $0 + $1.amount }
                                Text("¥\(String(format: "%.0f", totalExpense))")
                                    .font(.title2)
                                    .font(.system(size: 18, weight: .bold))
                                    .foregroundColor(.red)
                                Text("支出总金额")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                            .frame(maxWidth: .infinity)

                            Divider()
                                .frame(height: 40)

                            VStack {
                                let totalIncome = filteredTransactions.filter { !$0.isExpense }.reduce(0) { $0 + $1.amount }
                                Text("¥\(String(format: "%.0f", totalIncome))")
                                    .font(.title2)
                                    .font(.system(size: 18, weight: .bold))
                                    .foregroundColor(.green)
                                Text("收入总金额")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                            .frame(maxWidth: .infinity)
                        }
                    }
                    .padding()
                    .background(Color(.systemGray6))
                    .cornerRadius(12)

                    // 选择选项
                    VStack(alignment: .leading, spacing: 16) {
                        Text("导出设置")
                            .font(.headline)

                        // 时间范围选择
                        VStack(alignment: .leading, spacing: 8) {
                            Text("时间范围")
                                .font(.subheadline)
                                .font(.system(size: 16, weight: .medium))

                            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2), spacing: 8) {
                                ForEach(ExportData.DateRange.allCases, id: \.self) { range in
                                    Button(action: { selectedDateRange = range }) {
                                        Text(range.displayName)
                                            .font(.caption)
                                            .padding(.vertical, 8)
                                            .padding(.horizontal, 12)
                                            .frame(maxWidth: .infinity)
                                            .background(selectedDateRange == range ? Color.blue : Color(.systemGray5))
                                            .foregroundColor(selectedDateRange == range ? .white : .primary)
                                            .cornerRadius(8)
                                    }
                                }
                            }
                        }

                        // 文件格式选择
                        VStack(alignment: .leading, spacing: 8) {
                            Text("文件格式")
                                .font(.subheadline)
                                .font(.system(size: 16, weight: .medium))

                            HStack(spacing: 12) {
                                ForEach(ExportData.ExportFormat.allCases, id: \.self) { format in
                                    Button(action: { selectedFormat = format }) {
                                        HStack {
                                            Image(systemName: selectedFormat == format ? "checkmark.circle.fill" : "circle")
                                            Text(format.displayName)
                                        }
                                        .foregroundColor(selectedFormat == format ? .blue : .primary)
                                    }
                                }
                                Spacer()
                            }
                        }
                    }
                    .padding()
                    .background(Color(.systemGray6))
                    .cornerRadius(12)

                    // 操作按钮
                    VStack(spacing: 12) {
                        Button(action: previewExportData) {
                            HStack {
                                Image(systemName: "eye")
                                Text("预览数据")
                            }
                            .font(.headline)
                            .foregroundColor(.blue)
                            .padding()
                            .frame(maxWidth: .infinity)
                            .background(Color.blue.opacity(0.1))
                            .cornerRadius(10)
                        }
                        .disabled(filteredTransactions.isEmpty)

                        Button(action: exportData) {
                            HStack {
                                Image(systemName: "square.and.arrow.up")
                                Text("导出数据")
                            }
                            .font(.headline)
                            .foregroundColor(.white)
                            .padding()
                            .frame(maxWidth: .infinity)
                            .background(filteredTransactions.isEmpty ? Color.gray : Color.green)
                            .cornerRadius(10)
                        }
                        .disabled(filteredTransactions.isEmpty)
                    }

                    if filteredTransactions.isEmpty {
                        VStack(spacing: 8) {
                            Image(systemName: "tray")
                                .font(.largeTitle)
                                .foregroundColor(.secondary)
                            Text("所选时间范围内没有数据")
                                .foregroundColor(.secondary)
                            Text("请选择其他时间范围或先添加一些交易记录")
                                .font(.caption)
                                .foregroundColor(.secondary)
                                .multilineTextAlignment(.center)
                        }
                        .padding(.vertical, 40)
                    }
                }
                .padding()
            }
            .navigationTitle("数据导出")
            .sheet(isPresented: $showingActivityView) {
                if let fileURL = exportedFileURL {
                    ActivityViewController(activityItems: [fileURL])
                }
            }
            .sheet(isPresented: $showingPreview) {
                NavigationView {
                    ScrollView {
                        Text(previewData)
                            .font(.system(.caption, design: .monospaced))
                            .padding()
                    }
                    .navigationTitle("数据预览")
                    // Toolbar disabled for compilation
                }
            }
        }
    }

    private func previewExportData() {
        switch selectedFormat {
        case .csv:
            previewData = dataManager.exportDataAsCSV(transactions: filteredTransactions)
        case .txt:
            previewData = dataManager.exportDataAsText(transactions: filteredTransactions)
        }
        showingPreview = true
    }

    private func exportData() {
        let fileName = "VoiceBudget_\(selectedDateRange.rawValue)_\(Date().timeIntervalSince1970).\(selectedFormat.fileExtension)"
        let documentDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
        let fileURL = documentDirectory.appendingPathComponent(fileName)

        let content: String
        switch selectedFormat {
        case .csv:
            content = dataManager.exportDataAsCSV(transactions: filteredTransactions)
        case .txt:
            content = dataManager.exportDataAsText(transactions: filteredTransactions)
        }

        do {
            try content.write(to: fileURL, atomically: true, encoding: .utf8)
            exportedFileURL = fileURL
            showingActivityView = true
        } catch {
            print("导出失败: \(error.localizedDescription)")
        }
    }
}

// MARK: - Activity View Controller
struct ActivityViewController: UIViewControllerRepresentable {
    let activityItems: [Any]

    func makeUIViewController(context: Context) -> UIActivityViewController {
        UIActivityViewController(activityItems: activityItems, applicationActivities: nil)
    }

    func updateUIViewController(_ uiViewController: UIActivityViewController, context: Context) {}
}

// MARK: - Preview
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
            .environmentObject(DataManager.shared)
    }
}